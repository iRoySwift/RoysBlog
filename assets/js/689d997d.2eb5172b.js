"use strict";(self.webpackChunkroys_blog=self.webpackChunkroys_blog||[]).push([[4782],{3905:(n,e,t)=>{t.d(e,{Zo:()=>u,kt:()=>d});var a=t(7294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,a,o=function(n,e){if(null==n)return{};var t,a,o={},r=Object.keys(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var l=a.createContext({}),c=function(n){var e=a.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},u=function(n){var e=c(n.components);return a.createElement(l.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(n,e){var t=n.components,o=n.mdxType,r=n.originalType,l=n.parentName,u=s(n,["components","mdxType","originalType","parentName"]),m=c(t),d=o,k=m["".concat(l,".").concat(d)]||m[d]||p[d]||r;return t?a.createElement(k,i(i({ref:e},u),{},{components:t})):a.createElement(k,i({ref:e},u))}));function d(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var r=t.length,i=new Array(r);i[0]=m;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=n,s.mdxType="string"==typeof n?n:o,i[1]=s;for(var c=2;c<r;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1007:(n,e,t)=>{t.d(e,{Z:()=>m});var a=t(7294);const o="browserWindow_my1Q",r="browserWindowHeader_jXSR",i="buttons_uHc7",s="browserWindowAddressBar_Pd8y",l="dot_giz1",c="browserWindowMenuIcon_Vhuh",u="bar_rrRL",p="browserWindowBody_Idgs";function m(n){let{children:e,minHeight:t,url:m="http://localhost:3000"}=n;return a.createElement("div",{className:o,style:{minHeight:t}},a.createElement("div",{className:r},a.createElement("div",{className:i},a.createElement("span",{className:l,style:{background:"#f25f58"}}),a.createElement("span",{className:l,style:{background:"#fbbe3c"}}),a.createElement("span",{className:l,style:{background:"#58cb42"}})),a.createElement("div",{className:s},m),a.createElement("div",{className:c},a.createElement("div",null,a.createElement("span",{className:u}),a.createElement("span",{className:u}),a.createElement("span",{className:u})))),a.createElement("div",{className:p},e))}},2546:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>p,contentTitle:()=>c,default:()=>k,frontMatter:()=>l,metadata:()=>u,toc:()=>m});var a=t(7462),o=(t(7294),t(3905)),r=t(4996),i=t(941),s=t(1007);const l={id:"solana-cpi",title:"3\u3001\u5408\u7ea6\u95f4\u8c03\u7528CPI"},c=void 0,u={unversionedId:"solana/solana-bootcamp/6\u3001Solana\u5408\u7ea6\u5f00\u53d1Part2/solana-cpi",id:"solana/solana-bootcamp/6\u3001Solana\u5408\u7ea6\u5f00\u53d1Part2/solana-cpi",title:"3\u3001\u5408\u7ea6\u95f4\u8c03\u7528CPI",description:"Solana \u8fd0\u884c\u65f6\u5141\u8bb8\u7a0b\u5e8f\u901a\u8fc7\u79f0\u4e3a\u8de8\u7a0b\u5e8f\u8c03\u7528\u7684\u673a\u5236\u76f8\u4e92\u8c03\u7528\u3002 \u7a0b\u5e8f\u4e4b\u95f4\u7684\u8c03\u7528\u662f\u901a\u8fc7\u4e00\u4e2a\u7a0b\u5e8f\u8c03\u7528\u53e6\u4e00\u4e2a\u7a0b\u5e8f\u7684\u6307\u4ee4\u6765\u5b9e\u73b0\u7684\u3002 \u8c03\u7528\u7a0b\u5e8f\u5c06\u6682\u505c\uff0c\u76f4\u5230\u88ab\u8c03\u7528\u7a0b\u5e8f\u5b8c\u6210\u5bf9\u6307\u4ee4\u7684\u5904\u7406\u3002",source:"@site/docs/solana/solana-bootcamp/6\u3001Solana\u5408\u7ea6\u5f00\u53d1Part2/3\u3001\u5408\u7ea6\u95f4\u8c03\u7528CPI.md",sourceDirName:"solana/solana-bootcamp/6\u3001Solana\u5408\u7ea6\u5f00\u53d1Part2",slug:"/solana/solana-bootcamp/6\u3001Solana\u5408\u7ea6\u5f00\u53d1Part2/solana-cpi",permalink:"/docs/solana/solana-bootcamp/6\u3001Solana\u5408\u7ea6\u5f00\u53d1Part2/solana-cpi",draft:!1,editUrl:"https://github.com/iRoySwift/RoysBlog/tree/master/docs/solana/solana-bootcamp/6\u3001Solana\u5408\u7ea6\u5f00\u53d1Part2/3\u3001\u5408\u7ea6\u95f4\u8c03\u7528CPI.md",tags:[],version:"current",frontMatter:{id:"solana-cpi",title:"3\u3001\u5408\u7ea6\u95f4\u8c03\u7528CPI"},sidebar:"docs",previous:{title:"2\u3001PDA\u8d26\u53f7",permalink:"/docs/solana/solana-bootcamp/6\u3001Solana\u5408\u7ea6\u5f00\u53d1Part2/solana-pda"},next:{title:"4\u3001\u7cfb\u7edf\u53d8\u91cf",permalink:"/docs/solana/solana-bootcamp/6\u3001Solana\u5408\u7ea6\u5f00\u53d1Part2/solana-var"}},p={},m=[{value:"invoke \u8def\u7531\u5408\u7ea6",id:"invoke-\u8def\u7531\u5408\u7ea6",level:2},{value:"invoke_signed \u8c03\u7528",id:"invoke_signed-\u8c03\u7528",level:2}],d={toc:m};function k(n){let{components:e,...t}=n;return(0,o.kt)("wrapper",(0,a.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Solana \u8fd0\u884c\u65f6\u5141\u8bb8\u7a0b\u5e8f\u901a\u8fc7\u79f0\u4e3a\u8de8\u7a0b\u5e8f\u8c03\u7528\u7684\u673a\u5236\u76f8\u4e92\u8c03\u7528\u3002 \u7a0b\u5e8f\u4e4b\u95f4\u7684\u8c03\u7528\u662f\u901a\u8fc7\u4e00\u4e2a\u7a0b\u5e8f\u8c03\u7528\u53e6\u4e00\u4e2a\u7a0b\u5e8f\u7684\u6307\u4ee4\u6765\u5b9e\u73b0\u7684\u3002 \u8c03\u7528\u7a0b\u5e8f\u5c06\u6682\u505c\uff0c\u76f4\u5230\u88ab\u8c03\u7528\u7a0b\u5e8f\u5b8c\u6210\u5bf9\u6307\u4ee4\u7684\u5904\u7406\u3002"),(0,o.kt)("p",null,"\u8fd8\u662f\u4ee5 ATA \u8d26\u53f7\u6765\u4e3e\u4f8b\u5b50\u3002\u6bd4\u5982\u6211\u4eec\u521b\u5efa\u4e86\u4ee3\u5e01 TokenA\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u8981\u7ed9\u67d0\u4e2a\u4eba\u53d1\u653e\u7a7a\u6295\u3002\u90a3\u4e48\u6839\u636e\u6211\u4eec\u524d\u9762\u7684\u7ecf\u9a8c\u77e5\u9053\uff0c\u5904\u7406\u65b9\u5f0f\u662f\u8fd9\u6837\u7684\uff0c\u9996\u5148\u6211\u4eec\u8981\u4e3a\u8fd9\u4e2a\u7528\u6237\u521b\u5efa\u5176\u5bf9\u5e94\u7684 TokenA \u7684 ATA \u8d26\u53f7\uff0c\u6bd4\u5982\u53eb TokenA_ATA_Account\u3002\u7136\u540e\u518d\u7ed9\u8fd9\u4e2a\u5730\u5740\u505a mint \u64cd\u4f5c\u3002"),(0,o.kt)("p",null,"\u90a3\u4e48\u6211\u4eec\u9996\u5148\u6309\u7167\u524d\u9762\u6587\u7ae0\u7684\u6b65\u9aa4\uff0c\u521b\u5efa\u4e00\u4e2a TokenA_ATA_Account \u5730\u5740\uff0c\u5e76\u5c06\u5176 ower_pubkey \u4e3a\u8be5\u7528\u6237\u7684\u4ea4\u6613\u3002\u7136\u540e\u8fd8\u8981\u518d\u521b\u5efa\u4e00\u4e2a\u7ed9 TokenA_ATA_Account mint TokenA \u4ee3\u5e01\u7684\u4ea4\u6613\u3002"),(0,o.kt)("p",null,"\u8fd9\u91cc\u7684\u4e24\u4e2a\u4ea4\u6613\u6709\u5148\u540e\u987a\u5e8f\u5173\u7cfb\uff0c\u4e14\u7b2c\u4e8c\u4e2a\u4ea4\u6613\u9700\u8981\u7b49\u5f85\u7b2c\u4e00\u4e2a\u4ea4\u6613\u6267\u884c\u5b8c\u6210\uff0c\u540c\u65f6\u4e24\u6b21\u4ea4\u6613\u7684 gas \u8d39\u7528\u4e5f\u4f1a\u66f4\u9ad8\u3002\u90a3\u4e48\u6709\u6ca1\u4ec0\u4e48\u529e\u6cd5\u5c06\u4e24\u6b21\u4ea4\u6613\u8fdb\u884c\u5408\u5e76\u5462\uff1f"),(0,o.kt)("p",null,"\u7b54\u6848\u5c31\u662f\u7528\u4e00\u4e2a\u5408\u7ea6\u6765\u5b9e\u73b0\u8fd9\u4e24\u4e2a\u6b65\u9aa4\uff0c\u7136\u540e\u53d1\u9001\u4e00\u4e2a\u4ea4\u6613\u5373\u53ef\u3002\u5728\u8fd9\u4e2a\u5408\u7ea6\u91cc\u9762\uff0c\u5b9e\u73b0\u5bf9\u8d26\u53f7\u7684\u521b\u5efa\uff0c\u4ee5\u53ca\u5bf9 SPL-Token \u7684 mint \u4e24\u4e2a\u52a8\u4f5c\u3002\u8fd9\u4e2a\u5408\u7ea6\u9700\u8981\u8ddf ATA \u5408\u7ea6\u4ea4\u4e92\uff0c\u8c03\u7528 ATA \u7684\u521b\u5efa\u8d26\u53f7\u6307\u4ee4\uff0c\u4e4b\u540e\u518d\u548c Token \u5408\u7ea6\u4ea4\u4e92\uff0c\u6267\u884c\u5176 mint \u7684\u6307\u4ee4\u3002"),(0,o.kt)("p",null,"\u5408\u7ea6\u4e4b\u95f4\u8c03\u7528\u5206\u6210\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u4e0d\u9700\u8981\u6821\u9a8c\u7b7e\u540d\u7684 invoke,\u53e6\u4e00\u7c7b\u662f\u76ee\u6807\u5408\u7ea6\u9700\u8981\u6821\u9a8c\u64cd\u4f5c\u6743\u9650\u7684 invoke_signed \u65b9\u6cd5\uff0c\u524d\u8005\u7c7b\u4f3c router \u8def\u7531\u5230\u53e6\u5916\u4e00\u4e2a\u5408\u7ea6\u6267\u884c\uff0c\u540e\u8005\u5219\u76ee\u6807\u7a0b\u5e8f\u5bf9\u76f8\u5173\u7684\u8d26\u53f7\u6709\u64cd\u4f5c\u6743\u9650\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u524d\u9762\u8bf4\u7684 PDA \u8d26\u53f7\u3002"),(0,o.kt)("h2",{id:"invoke-\u8def\u7531\u5408\u7ea6"},"invoke \u8def\u7531\u5408\u7ea6"),(0,o.kt)("p",null,'\u5982\u679c\u76ee\u6807\u5408\u7ea6\u5bf9\u8f93\u5165\u7684\u6240\u6709 Account \u65e0\u9700\u505a\u7b7e\u540d\u6821\u9a8c\uff0c\u8fd9\u79cd\u573a\u666f\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 invoke \u6765\u76f4\u63a5\u8c03\u7528\u76ee\u6807\u5408\u7ea6\u3002\u6bd4\u5982\u6211\u4eec\u5728\u6700\u524d\u9762\u7684"hello wolrd"\u7a0b\u5e8f\u4e2d\uff0c\u53ea\u662f\u6253\u5370\u4e86\u4e00\u6bb5\u65e5\u5fd7\uff0c\u5e76\u6ca1\u6709\u9700\u8981\u5bf9\u8f93\u5165\u7684 Account \u7b7e\u540d\u3002'),(0,o.kt)("p",null,"\u8fd9\u91cc\u6211\u4eec\u518d\u5b9e\u73b0\u4e00\u4e2a invoke \u5408\u7ea6\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},'use solana_program::{\n    account_info::{AccountInfo, next_account_info},\n    entrypoint,\n    entrypoint::ProgramResult,\n    pubkey::Pubkey,\n    instruction,\n    msg, program::invoke,\n};\n\n\n// Declare and export the program\'s entrypoint\nentrypoint!(process_instruction);\n\n// Program entrypoint\'s implementation\npub fn process_instruction(\n    _program_id: &Pubkey, // Public key of the account the hello world program was loaded into\n    accounts: &[AccountInfo], // The account to say hello to\n    _instruction_data: &[u8], // Ignored, all helloworld instructions are hellos\n) -> ProgramResult {\n\n    // Iterating accounts is safer than indexing\n    let accounts_iter = &mut accounts.iter();\n\n    // Get the account to say hello to\n    let account = next_account_info(accounts_iter)?;\n    let helloworld = next_account_info(accounts_iter)?;\n\n    msg!("invoke program entrypoint from {}", account.key);\n\n    let account_metas = vec![\n        instruction::AccountMeta::new(*account.key, true),\n    ];\n\n    let instruction = instruction::Instruction::new_with_bytes(\n        *helloworld.key,\n        "hello".as_bytes(),\n        account_metas,\n    );\n\n    let account_infos = [\n        account.clone(),\n    ];\n\n    invoke(&instruction, &account_infos[..])\n}\n')),(0,o.kt)("p",null,"\u8fd9\u91cc\uff0c\u4ece\u8f93\u5165\u4e2d\u5f97\u5230\u4e24\u4e2a Account\uff0c\u7b2c\u4e00\u4e2a\u662f\u8c03\u7528\u7b2c\u4e8c\u4e2a\u7684\u53c2\u6570\uff0c\u7b2c\u4e8c\u4e2a\u662f helloworld \u7684\u5408\u7ea6\u7684\u5730\u5740\u3002"),(0,o.kt)("p",null,"\u7136\u540e\u6784\u9020\u4e00\u4e2a instruction::Instruction\u3002\u6700\u540e\u518d\u8c03\u7528\u4e0a\u9762\u8bf4\u7684 invoke\uff0c\u8fd9\u91cc\u6307\u4ee4\u4e2d\u7684\u6570\u7ec4\u548c invoke \u91cc\u9762\u7684\u6570\u7ec4\u662f\u4e0d\u4e00\u6837\u7684\u3002\u6307\u4ee4\u4e2d\u662f\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"#[repr(C)]\n#[derive(Debug, Default, PartialEq, Eq, Clone, Serialize, Deserialize)]\npub struct AccountMeta {\n    /// An account's public key.\n    pub pubkey: Pubkey,\n    /// True if an `Instruction` requires a `Transaction` signature matching `pubkey`.\n    pub is_signer: bool,\n    /// True if the account data or metadata may be mutated during program execution.\n    pub is_writable: bool,\n}\n")),(0,o.kt)("p",null,"\u800c invoke \u91cc\u9762\u662f\u7cfb\u7edf\u7684 Account\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"/// Account information\n#[derive(Clone)]\n#[repr(C)]\npub struct AccountInfo<'a> {\n    /// Public key of the account\n    pub key: &'a Pubkey,\n    /// The lamports in the account.  Modifiable by programs.\n    pub lamports: Rc<RefCell<&'a mut u64>>,\n    /// The data held in this account.  Modifiable by programs.\n    pub data: Rc<RefCell<&'a mut [u8]>>,\n    /// Program that owns this account\n    pub owner: &'a Pubkey,\n    /// The epoch at which this account will next owe rent\n    pub rent_epoch: Epoch,\n    /// Was the transaction signed by this account's public key?\n    pub is_signer: bool,\n    /// Is the account writable?\n    pub is_writable: bool,\n    /// This account's data contains a loaded program (and is now read-only)\n    pub executable: bool,\n}\n")),(0,o.kt)("p",null,"\u7136\u540e\u6211\u4eec\uff0c\u7ee7\u7eed\u5b9e\u73b0\u4e00\u4e2a\u5ba2\u6237\u7aef\u7684\u8c03\u7528\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},'use std::str::FromStr;\n\nuse solana_sdk::signature::Signer;\nuse solana_rpc_client::rpc_client;\nuse solana_sdk::signer::keypair;\nuse solana_sdk::transaction;\nuse solana_program::instruction;\nuse solana_program::pubkey;\n\nconst RPC_ADDR: &str = "https://api.devnet.solana.com";\n\n\nfn main() {\n    let helloworld = pubkey::Pubkey::from_str("FbLTBNZmc77xJpf4whkr4t7vdctjsk8DBkfuksqtQ7g8").unwrap();\n    let invoke= pubkey::Pubkey::from_str("CjN2fRAzLxJnYrNM8X3cbJLiVR57EzXNrK1HBNR2QXPa").unwrap();\n\n    let me = keypair::Keypair::from_base58_string("VtqQi7BBnvnkkBefXigNdSwjywsTj2JNSFT82sNtQ3qcmcQ96SnLqtsmK44eCsVqgEX2YBMTmcvov3YfA2z7xs8");\n    println!("me is {}", me.pubkey());\n\n    let client = rpc_client::RpcClient::new(RPC_ADDR);\n\n    let account_metas = vec![\n        instruction::AccountMeta::new(me.pubkey(), true),\n        instruction::AccountMeta::new_readonly(helloworld, false),\n    ];\n\n    let instruction = instruction::Instruction::new_with_bytes(\n        invoke,\n        "hello".as_bytes(),\n        account_metas,\n    );\n    let ixs = vec![instruction];\n\n    let latest_blockhash = client.get_latest_blockhash().unwrap();\n    let sig = client.send_and_confirm_transaction(&transaction::Transaction::new_signed_with_payer(\n        &ixs,\n        Some(&me.pubkey()),\n        &[&me],\n        latest_blockhash,\n    )).unwrap();\n\n    println!("tx:{}", sig);\n}\n')),(0,o.kt)("p",null,"\u548c\u524d\u9762\u7684\u8c03\u7528\u4e00\u6837\uff0c\u4e3b\u8981\u4f20\u9012\u4e86\u4e24\u4e2a AccountMeta\u3002\u6784\u5efa\u6267\u884c\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},"cargo run\nCompiling cli v0.1.0 (./Solana-Asia-Summer-2023/s101/Solana-Program-Part2/demo/invoke/cli)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.48s\n    Running `target/debug/cli`\nme is 5pWae6RxD3zrYzBmPTMYo1LZ5vef3vfWH6iV3s8n6ZRG\ntx:3neCUu9cQHLuZvbwiDzneFPztos3PsmNuvytSdzFUz5ix4NpK8GmgDcGvsqSPzAdmnMhTpmzhFfgNZGeRYQn3zfh\n")),(0,o.kt)("p",null,"\u4ea7\u770b\u8fd9\u4e2a\u4ea4\u6613\u7684\u6d4f\u89c8\u5668:"),(0,o.kt)(s.Z,{minHeight:240,mdxType:"BrowserWindow"},(0,o.kt)(i.Z,{alt:"Docusaurus themed image",sources:{light:(0,r.Z)("/img/solana/invoke.png"),dark:(0,r.Z)("/img/solana/invoke.png")},mdxType:"ThemedImage"})),(0,o.kt)("p",null,'\u8fd9\u91cc\u53ef\u4ee5\u5f88\u660e\u663e\u7684\u770b\u5230 "inner instruction"\u3002\u4ee5\u53ca\u5bf9\u5e94\u7684\u65e5\u5fd7\u6253\u5370\uff0c\u5148\u6253\u5370\u4e86 invoke \u5408\u7ea6\uff0c\u7136\u540e\u5230 helloworld \u5408\u7ea6\u3002'),(0,o.kt)("h2",{id:"invoke_signed-\u8c03\u7528"},"invoke_signed \u8c03\u7528"),(0,o.kt)("p",null,"invoke_signed \u548c invoke \u7c7b\u4f3c\uff0c\u90fd\u662f\u5728\u5408\u7ea6\u4e2d\u8c03\u7528\u5176\u4ed6\u5408\u7ea6\u7684\u65b9\u6cd5\u3002\u4f46\u662f\u6709\u4e00\u4e2a\u7279\u6b8a\u7684\u529f\u80fd\uff0c\u5c31\u662f\u53ef\u4ee5\u8fdb\u884c\u7b7e\u540d\u6821\u9a8c\u3002\u5177\u4f53\u662f\u4ec0\u4e48\u6837\u7684\u7b7e\u540d\u5462\uff1f"),(0,o.kt)("p",null,"\u5728 PDA \u7684\u5185\u5bb9\u4ecb\u7ecd\u4e2d\uff0c\u6211\u4eec\u6709\u4ecb\u7ecd\u5230\u5408\u7ea6\u5185\u751f\u6210 PDA \u8d26\u53f7\u7684\u65b9\u5f0f\uff0c\u5176\u6709\u4e24\u4e2a\u90e8\u5206\u7ec4\u6210\uff1a"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u4e00\u4e2a\u5730\u5740"),(0,o.kt)("li",{parentName:"ul"},"\u4e00\u4e2a Seed\n\u901a\u8fc7 find_program_address \u53ef\u4ee5\u5f97\u5230 PDA \u5730\u5740\uff0c\u4ee5\u53ca\u4e00\u4e2a Bump \u79cd\u5b50\u3002")),(0,o.kt)("p",null,"\u8fd9\u91cc\u4f20\u5165\u7684\u5730\u5740\uff0c\u5c06\u6709\u6743\u9650\u6821\u9a8c\u8be5 PDA \u5730\u5740\u7684\u7b7e\u540d\uff0c\u5c31\u53ef\u4ee5\u8ba4\u4e3a\u8fd9\u4e2a\u5408\u7ea6\u5730\u5740\uff0c\u76f8\u5f53\u4e8e PDA \u8d26\u53f7\u7684\u79c1\u94a5\u3002"),(0,o.kt)(s.Z,{minHeight:240,mdxType:"BrowserWindow"},(0,o.kt)(i.Z,{alt:"Docusaurus themed image",sources:{light:(0,r.Z)("/img/solana/invoke_signed.png"),dark:(0,r.Z)("/img/solana/invoke_signed.png")},mdxType:"ThemedImage"})),(0,o.kt)("p",null,"\u6700\u5e38\u89c1\u7684\u4f7f\u7528\u5c31\u662f\u7ba1\u7406\u8d44\u91d1\u8d26\u53f7\uff0c\u6bd4\u5982\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"# use borsh::{BorshSerialize, BorshDeserialize};\n   # use solana_program::{\n   #     pubkey::Pubkey,\n   #     entrypoint::ProgramResult,\n   #     program::invoke_signed,\n   #     system_instruction,\n   #     account_info::{\n   #         AccountInfo,\n   #         next_account_info,\n   #     },\n   # };\n   // The custom instruction processed by our program. It includes the\n   // PDA's bump seed, which is derived by the client program. This\n   // definition is also imported into the off-chain client program.\n   // The computed address of the PDA will be passed to this program via\n   // the `accounts` vector of the `Instruction` type.\n   #[derive(BorshSerialize, BorshDeserialize, Debug)]\n   pub struct InstructionData {\n       pub vault_bump_seed: u8,\n       pub lamports: u64,\n   }\n\n   // The size in bytes of a vault account. The client program needs\n   // this information to calculate the quantity of lamports necessary\n   // to pay for the account's rent.\n   pub static VAULT_ACCOUNT_SIZE: u64 = 1024;\n    /\n   // The entrypoint of the on-chain program, as provided to the\n   // `entrypoint!` macro.\n   fn process_instruction(\n       program_id: &Pubkey,\n       accounts: &[AccountInfo],\n       instruction_data: &[u8],\n   ) -> ProgramResult {\n       let account_info_iter = &mut accounts.iter();\n       let payer = next_account_info(account_info_iter)?;\n       // The vault PDA, derived from the payer's address\n       let vault = next_account_info(account_info_iter)?;\n\n       let mut instruction_data = instruction_data;\n       let instr = InstructionData::deserialize(&mut instruction_data)?;\n       let vault_bump_seed = instr.vault_bump_seed;\n       let lamports = instr.lamports;\n       let vault_size = VAULT_ACCOUNT_SIZE;\n\n       // Invoke the system program to create an account while virtually\n       // signing with the vault PDA, which is owned by this caller program.\n       invoke_signed(\n           &system_instruction::create_account(\n               &payer.key,\n               &vault.key,\n               lamports,\n               vault_size,\n               &program_id,\n           ),\n           &[\n               payer.clone(),\n               vault.clone(),\n           ],\n           // A slice of seed slices, each seed slice being the set\n           // of seeds used to generate one of the PDAs required by the\n           // callee program, the final seed being a single-element slice\n           // containing the `u8` bump seed.\n           &[\n               &[\n                   b\"vault\",\n                   payer.key.as_ref(),\n                   &[vault_bump_seed],\n               ],\n           ]\n       )?;\n\n       Ok(())\n   }\n")),(0,o.kt)("p",null,"\u8fd9\u4e2a\u7a0b\u5e8f\uff0c\u63a5\u6536\u5ba2\u6237\u7aef\u8f93\u5165\u7684\u4e00\u4e2a seed \u4f5c\u4e3a\u91d1\u5e93\u7684\u94a5\u5319\u3002\u91d1\u5e93\u8d26\u53f7\uff0c\u7531\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u65f6\u5019\u8fdb\u884c\u521b\u5efa PDA \u8d26\u53f7\uff0c\u8fd9\u4e2a\u8d26\u53f7\u7684\u5730\u5740\u53c2\u6570\u7528\u7684\u5c31\u662f\u8fd9\u4e2a\u5408\u7ea6\uff0c\u56e0\u6b64\u8fd9\u4e2a\u5408\u7ea6\u62e5\u6709\u5bf9\u4e8e\u8be5 PDA \u8d26\u53f7\u7684\u7b7e\u540d\u6743\u3002"),(0,o.kt)("p",null,"\u6240\u4ee5\u8fd9\u91cc\u5728\u521b\u5efa\u8d26\u53f7\u7684\u65f6\u5019\uff0csystem_instruction::create_account \u53ef\u4ee5\u9274\u6743\u901a\u8fc7\u3002"),(0,o.kt)("p",null,"\u5728\u6b64\u4e4b\u540e\uff0c\u53ea\u8981\u5ba2\u6237\u7aef\u4f20\u5165\u6b63\u786e\u7684 seed\uff0c\u65e2\u53ef\u4ee5\u51fa\u53d1\u8fd9\u4e2a\u5408\u7ea6\u5bf9\u8be5 PDA \u7a0b\u5e8f\u8fdb\u884c\u76f8\u5e94\u7684\u7b7e\u540d\u52a8\u4f5c\uff0c\u6bd4\u5982\u548c SPL Token \u4ea4\u4e92\uff0c\u505a\u8f6c\u8d26\u52a8\u4f5c\u7b49\u3002"))}k.isMDXComponent=!0}}]);