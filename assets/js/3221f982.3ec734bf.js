"use strict";(self.webpackChunkroys_blog=self.webpackChunkroys_blog||[]).push([[5070],{3905:(n,e,t)=>{t.d(e,{Zo:()=>u,kt:()=>d});var a=t(7294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function c(n,e){if(null==n)return{};var t,a,o=function(n,e){if(null==n)return{};var t,a,o={},r=Object.keys(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var i=a.createContext({}),l=function(n){var e=a.useContext(i),t=e;return n&&(t="function"==typeof n?n(e):s(s({},e),n)),t},u=function(n){var e=l(n.components);return a.createElement(i.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(n,e){var t=n.components,o=n.mdxType,r=n.originalType,i=n.parentName,u=c(n,["components","mdxType","originalType","parentName"]),m=l(t),d=o,k=m["".concat(i,".").concat(d)]||m[d]||p[d]||r;return t?a.createElement(k,s(s({ref:e},u),{},{components:t})):a.createElement(k,s({ref:e},u))}));function d(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var r=t.length,s=new Array(r);s[0]=m;var c={};for(var i in e)hasOwnProperty.call(e,i)&&(c[i]=e[i]);c.originalType=n,c.mdxType="string"==typeof n?n:o,s[1]=c;for(var l=2;l<r;l++)s[l]=t[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1007:(n,e,t)=>{t.d(e,{Z:()=>m});var a=t(7294);const o="browserWindow_my1Q",r="browserWindowHeader_jXSR",s="buttons_uHc7",c="browserWindowAddressBar_Pd8y",i="dot_giz1",l="browserWindowMenuIcon_Vhuh",u="bar_rrRL",p="browserWindowBody_Idgs";function m(n){let{children:e,minHeight:t,url:m="http://localhost:3000"}=n;return a.createElement("div",{className:o,style:{minHeight:t}},a.createElement("div",{className:r},a.createElement("div",{className:s},a.createElement("span",{className:i,style:{background:"#f25f58"}}),a.createElement("span",{className:i,style:{background:"#fbbe3c"}}),a.createElement("span",{className:i,style:{background:"#58cb42"}})),a.createElement("div",{className:c},m),a.createElement("div",{className:l},a.createElement("div",null,a.createElement("span",{className:u}),a.createElement("span",{className:u}),a.createElement("span",{className:u})))),a.createElement("div",{className:p},e))}},1603:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>p,contentTitle:()=>l,default:()=>k,frontMatter:()=>i,metadata:()=>u,toc:()=>m});var a=t(7462),o=(t(7294),t(3905)),r=t(4996),s=t(941),c=t(1007);const i={id:"solana-contract-execise",title:"4\u3001\u8bfe\u540e\u7ec3\u4e60"},l=void 0,u={unversionedId:"solana/solana-bootcamp/3\u3001\u4e0eSolana\u5408\u7ea6\u4ea4\u4e92/solana-contract-execise",id:"solana/solana-bootcamp/3\u3001\u4e0eSolana\u5408\u7ea6\u4ea4\u4e92/solana-contract-execise",title:"4\u3001\u8bfe\u540e\u7ec3\u4e60",description:"\u8bfe\u540e\u7ec3\u4e60",source:"@site/docs/solana/solana-bootcamp/3\u3001\u4e0eSolana\u5408\u7ea6\u4ea4\u4e92/4\u3001\u8bfe\u540e\u7ec3\u4e60.md",sourceDirName:"solana/solana-bootcamp/3\u3001\u4e0eSolana\u5408\u7ea6\u4ea4\u4e92",slug:"/solana/solana-bootcamp/3\u3001\u4e0eSolana\u5408\u7ea6\u4ea4\u4e92/solana-contract-execise",permalink:"/docs/solana/solana-bootcamp/3\u3001\u4e0eSolana\u5408\u7ea6\u4ea4\u4e92/solana-contract-execise",draft:!1,editUrl:"https://github.com/iRoySwift/RoysBlog/tree/master/docs/solana/solana-bootcamp/3\u3001\u4e0eSolana\u5408\u7ea6\u4ea4\u4e92/4\u3001\u8bfe\u540e\u7ec3\u4e60.md",tags:[],version:"current",frontMatter:{id:"solana-contract-execise",title:"4\u3001\u8bfe\u540e\u7ec3\u4e60"},sidebar:"docs",previous:{title:"3\u3001\u5408\u7ea6\u8c03\u7528",permalink:"/docs/solana/solana-bootcamp/3\u3001\u4e0eSolana\u5408\u7ea6\u4ea4\u4e92/solana-contract-call"},next:{title:"\u81ea\u5b9a\u4e49\u6a21\u677f",permalink:"/docs/web/react/custom-templates"}},p={},m=[{value:"1\u3001Demo",id:"1demo",level:2},{value:"2\u3001 \u521b\u5efa\u4ee3\u5e01",id:"2-\u521b\u5efa\u4ee3\u5e01",level:2},{value:"\u521b\u5efa token \u4e0e\u94f8\u5e01",id:"\u521b\u5efa-token-\u4e0e\u94f8\u5e01",level:3},{value:"\u67e5\u8be2\u62e5\u6709\u94f8\u5e01\u6743\u9650\u7684 token",id:"\u67e5\u8be2\u62e5\u6709\u94f8\u5e01\u6743\u9650\u7684-token",level:3},{value:"3.\u53d1\u9001 Token",id:"3\u53d1\u9001-token",level:2},{value:"\u521b\u5efa\u6307\u4ee4",id:"\u521b\u5efa\u6307\u4ee4",level:3},{value:"\u521b\u5efa\u5e76\u53d1\u9001\u7248\u672c\u5316\u4ea4\u6613",id:"\u521b\u5efa\u5e76\u53d1\u9001\u7248\u672c\u5316\u4ea4\u6613",level:3}],d={toc:m};function k(n){let{components:e,...t}=n;return(0,o.kt)("wrapper",(0,a.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u8bfe\u540e\u7ec3\u4e60\n\u5b9e\u73b0\u4e00\u4e2a DApp \u9875\u9762\uff0c\u5b9e\u73b0\u4ee3\u5e01\u521b\u5efa\uff0c\u5e76\u6309\u767d\u540d\u5355\u53d1\u9001\u7a7a\u6295"),(0,o.kt)("p",null,"\u63d0\u793a\uff1a"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u901a\u8fc7\u4e0e Token \u5408\u7ea6\u4ea4\u4e92\uff0c\u521b\u5efa\u4ee3\u5e01"),(0,o.kt)("li",{parentName:"ul"},"\u901a\u8fc7\u4e0e Token \u5408\u7ea6\u4ea4\u4e92\uff0c\u7ed9\u767d\u540d\u5355\u4e2d\u7684\u5730\u5740\uff0c\u53d1\u9001 SPL Token \u4ee3\u5e01"),(0,o.kt)("li",{parentName:"ul"},"\u5efa\u8bae\u4f7f\u7528 SPL-Token \u63d0\u4f9b\u7684\u5e93\u6765\u6784\u5efa instruction")),(0,o.kt)("h2",{id:"1demo"},"1\u3001Demo"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"http://tool.iroyswift.com/#/tutorial/mintTokenTransfer"},"\u7f51\u5740\u6f14\u793a")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u9875\u9762\u622a\u56fe")),(0,o.kt)(c.Z,{minHeight:240,mdxType:"BrowserWindow"},(0,o.kt)(s.Z,{alt:"Docusaurus themed image",sources:{light:(0,r.Z)("/img/solana/mint_token_transfer.png"),dark:(0,r.Z)("/img/solana/mint_token_transfer.png")},mdxType:"ThemedImage"})),(0,o.kt)("h2",{id:"2-\u521b\u5efa\u4ee3\u5e01"},"2\u3001 \u521b\u5efa\u4ee3\u5e01"),(0,o.kt)("p",null,"Create Token PublicKey: ",(0,o.kt)("a",{parentName:"p",href:"https://explorer.solana.com/address/7yeP7VUDJ16zJH7DYwmeAAisHB3DHHPAUuHQzCEKZzhj?cluster=devnet"},"7yeP7VUDJ16zJH7DYwmeAAisHB3DHHPAUuHQzCEKZzhj")),(0,o.kt)("p",null,"Mint Token Transaction: ",(0,o.kt)("a",{parentName:"p",href:"https://explorer.solana.com/tx/5Zpq9tR3X2JE6NwrP9pJ3HEKHWt6eykfT8JJoQusovzfzxPp2fZ6YJCBnNUdvGGieCVhRPJAc885w9cYePQbxM62?cluster=devnet"},"5Zpq9tR3X2JE6NwrP9pJ3HEKHWt6eykfT8JJoQusovzfzxPp2fZ6YJCBnNUdvGGieCVhRPJAc885w9cYePQbxM62")),(0,o.kt)("h3",{id:"\u521b\u5efa-token-\u4e0e\u94f8\u5e01"},"\u521b\u5efa token \u4e0e\u94f8\u5e01"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"createMint \u4e0e createAssociatedTokenAccount \u540c\u65f6\u4f7f\u7528\u65f6\u6ce8\u610f\uff1a"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre"},"- Connection \u8981\u7528 **confirmed** ,\n- \u4e0d\u7136\u4f1a\u5bfc\u81f4\u8c03\u7528createAssociatedTokenAccount\u62a5\u9519\uff0c\n- \u56e0\u4e3acreateMint\u8fd8\u6ca1\u6709\u786e\u8ba4\u65e0\u6cd5\u521b\u5efaATA\u8d26\u53f7\n")),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'// Step 1 \u8fde\u63a5\u5230Solana\u7f51\u7edc devnet\nconst devnet = clusterApiUrl("devnet");\nconst connection = new Connection(devnet, "confirmed");\n'))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="solana_tools/client/src/pages/Tutorial/MintTokenTransfer/MintToken.tsx"',title:'"solana_tools/client/src/pages/Tutorial/MintTokenTransfer/MintToken.tsx"'},'// \u521b\u5efaToken\u548cATA\nconst createToken = async () => {\n    setLoading(true);\n    // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684 mint \uff08\u94f8\u5e01\uff09\n    const mint: PublicKey = await createMint(\n        connection,\n        signer,\n        signer.publicKey,\n        signer.publicKey,\n        9\n    );\n    console.log(`   \u2705 - Token mint address: ${mint.toBase58()}`);\n\n    // \u521b\u5efaAYTA\u8d26\u53f7\n    const ata = await createAssociatedTokenAccount(\n        connection,\n        signer,\n        mint,\n        signer.publicKey\n    );\n    console.log(`   \u2705 - Token ATA address: ${ata.toBase58()}`);\n\n    setLoading(false);\n\n    enqueueSnackbar("\ud83c\udf89 Mint Token succesfully!", {\n        variant: "success",\n    });\n};\n\n// Mint Token\nconst handleMintToken = async (\n    mint: PublicKey,\n    ata: PublicKey,\n    mintNumber: number\n) => {\n    setLoading(true);\n\n    const Signature = await mintTo(\n        connection,\n        signer,\n        mint,\n        ata,\n        signer,\n        mintNumber * LAMPORTS_PER_SOL\n    );\n\n    setLoading(false);\n\n    console.log(\n        `   \u2705 - Mint ${mintNumber} Token To ${ata.toBase58()} transaction:${Signature}`\n    );\n    enqueueSnackbar(`\ud83c\udf89 Mint ${mintNumber} Token succesfully!`, {\n        variant: "success",\n    });\n};\n')),(0,o.kt)("h3",{id:"\u67e5\u8be2\u62e5\u6709\u94f8\u5e01\u6743\u9650\u7684-token"},"\u67e5\u8be2\u62e5\u6709\u94f8\u5e01\u6743\u9650\u7684 token"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"\u67e5\u8be2\u540e\u7684\u5217\u8868\u8981\u7b5b\u9009\u51fa\u62e5\u6709\u94f8\u5e01\u6743\u7684 token"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// \u7b5b\u9009\u62e5\u6709\u94f8\u5e01\u6743\u9650\u7684token\nconst mintInfo = await getMint(connection, accountInfo.mint);\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// \u67e5\u8be2Token\u5217\u8868\nconst queryTokenList = async () => {\n    setLoading(true);\n    let arr: itokenItem[] = [];\n    setTokenList([]);\n    const result: any = await connection.getTokenAccountsByOwner(\n        signer.publicKey,\n        {\n            programId: TOKEN_PROGRAM_ID,\n        }\n    );\n    result.value.forEach(async item => {\n        // \u5904\u7406Unit8Array\u6570\u636e\n        const dataUnit8Array = item.account.data;\n        // \u5c06Unit8Array\u8f6c\u6362\u4e3aJSON\n        const accountInfo = AccountLayout.decode(dataUnit8Array);\n\n        // \u7b5b\u9009\u62e5\u6709\u94f8\u5e01\u6743\u9650\u7684token\n        const mintInfo = await getMint(connection, accountInfo.mint);\n        if (\n            mintInfo.mintAuthority?.toBase58() === signer.publicKey.toBase58()\n        ) {\n            arr.push(\n                createData(\n                    accountInfo.mint,\n                    item.pubkey,\n                    Number(accountInfo.amount / BigInt(LAMPORTS_PER_SOL)),\n                    1\n                )\n            );\n        }\n    });\n    setTimeout(() => {\n        setTokenList(arr);\n        setLoading(false);\n    }, 10000);\n};\n")),(0,o.kt)("h2",{id:"3\u53d1\u9001-token"},"3.\u53d1\u9001 Token"),(0,o.kt)("h3",{id:"\u521b\u5efa\u6307\u4ee4"},"\u521b\u5efa\u6307\u4ee4"),(0,o.kt)("p",null,"\u7ed9\u94b1\u5305\u5730\u5740\uff1aGir7LUMrsXHv5gGctKNp6th2Pj7j9qmYR1LSrsHS6Yaj \u53d1\u9001 1 \u4e2a token\uff1a7yeP7VUDJ16zJH7DYwmeAAisHB3DHHPAUuHQzCEKZzhj"),(0,o.kt)("p",null,"Transfer \u7ed3\u679c\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://explorer.solana.com/tx/4BYEaSzTTtFgHwysiiNDnX3UePZLDNeoNYVB3i7nA3PzcoFhy1e3bz1CrRTxwjpVoc12piT1bmf45jkSEJddkHaN?cluster=devnet"},"4BYEaSzTTtFgHwysiiNDnX3UePZLDNeoNYVB3i7nA3PzcoFhy1e3bz1CrRTxwjpVoc12piT1bmf45jkSEJddkHaN")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'// * Step 2 - create an array with your desires `instructions`\nconst txInstructions = [\n    createTransferInstruction(\n        ataPubkey.address,\n        toAtaPubkey.address,\n        signer.publicKey,\n        1 * LAMPORTS_PER_SOL\n    ),\n];\nconsole.log(\n    "   \u2705 - Step 2 - create an array with your desires `instructions`"\n);\n\n// * Step 3 - Generate a transaction and send it to the network\nconst txid = await createAndSendV0Tx(signer, connection, txInstructions);\nconsole.log(\n    "   \u2705 - Step 3 - Generate a transaction and send it to the network"\n);\n')),(0,o.kt)("h3",{id:"\u521b\u5efa\u5e76\u53d1\u9001\u7248\u672c\u5316\u4ea4\u6613"},"\u521b\u5efa\u5e76\u53d1\u9001\u7248\u672c\u5316\u4ea4\u6613"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'/**\n * \u521b\u5efa\u5e76\u53d1\u9001\u7248\u672c\u5316\u4ea4\u6613\n * @param signer                 Payer of the transaction and initialization fees\n * @param connection             Connection to use\n * @param txInstructions         Transaction Instruction Array\n * @param lookupTableAccount     Address Lookup Table Account\n * @returns                      Promise Transaction signature as base-58 encoded string\n */\nasync function createAndSendV0Tx(\n    signer: Signer,\n    connection: Connection,\n    txInstructions: TransactionInstruction[],\n    lookupTableAccount?: AddressLookupTableAccount\n): Promise<TransactionSignature> {\n    // * Step 1 - Fetch Latest Blockhash\n    // let latestBlockhash = await connection.getLatestBlockhash("finalized");\n    const {\n        context: { slot: minContextSlot },\n        value: { blockhash, lastValidBlockHeight },\n    } = await connection.getLatestBlockhashAndContext();\n    console.log(\n        "   \u2705 - 1. Fetched latest blockhash. Last valid height:",\n        lastValidBlockHeight\n    );\n\n    // * Step 2 - Generate Transaction Message\n    let messageV0;\n    if (lookupTableAccount) {\n        messageV0 = new TransactionMessage({\n            payerKey: signer.publicKey,\n            recentBlockhash: blockhash,\n            instructions: txInstructions,\n        }).compileToV0Message([lookupTableAccount]);\n    } else {\n        messageV0 = new TransactionMessage({\n            payerKey: signer.publicKey,\n            recentBlockhash: blockhash,\n            instructions: txInstructions,\n        }).compileToV0Message();\n    }\n    console.log("   \u2705 - 2. Compiled transaction message");\n    const transaction = new VersionedTransaction(messageV0);\n\n    // * Step 3 - Sign your transaction with the required `Signers`\n    transaction.sign([signer]);\n    console.log("   \u2705 - 3. Transaction Signed");\n\n    // * Step 4 - Send our v0 transaction to the cluster\n    const txid = await connection.sendTransaction(transaction, {\n        maxRetries: 5,\n        minContextSlot,\n    });\n    console.log("   \u2705 - 4. Transaction sent to network");\n\n    // * Step 5 - Confirm Transaction\n    const confirmation = await connection.confirmTransaction({\n        signature: txid,\n        blockhash: blockhash,\n        lastValidBlockHeight: lastValidBlockHeight,\n    });\n    if (confirmation.value.err) {\n        throw new Error("   \u274c - 5. Transaction not confirmed.");\n    }\n\n    console.log(\n        "   \ud83c\udf89 - 5. Transaction succesfully confirmed!",\n        `https://explorer.solana.com/tx/${txid}?cluster=devnet`\n    );\n    return txid;\n}\n')))}k.isMDXComponent=!0}}]);