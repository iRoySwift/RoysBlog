"use strict";(self.webpackChunkroys_blog=self.webpackChunkroys_blog||[]).push([[7289],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=o.createContext({}),u=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=u(e.components);return o.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},k=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),k=u(t),m=a,d=k["".concat(s,".").concat(m)]||k[m]||p[m]||r;return t?o.createElement(d,i(i({ref:n},c),{},{components:t})):o.createElement(d,i({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=k;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<r;u++)i[u]=t[u];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}k.displayName="MDXCreateElement"},1007:(e,n,t)=>{t.d(n,{Z:()=>k});var o=t(7294);const a="browserWindow_my1Q",r="browserWindowHeader_jXSR",i="buttons_uHc7",l="browserWindowAddressBar_Pd8y",s="dot_giz1",u="browserWindowMenuIcon_Vhuh",c="bar_rrRL",p="browserWindowBody_Idgs";function k(e){let{children:n,minHeight:t,url:k="http://localhost:3000"}=e;return o.createElement("div",{className:a,style:{minHeight:t}},o.createElement("div",{className:r},o.createElement("div",{className:i},o.createElement("span",{className:s,style:{background:"#f25f58"}}),o.createElement("span",{className:s,style:{background:"#fbbe3c"}}),o.createElement("span",{className:s,style:{background:"#58cb42"}})),o.createElement("div",{className:l},k),o.createElement("div",{className:u},o.createElement("div",null,o.createElement("span",{className:c}),o.createElement("span",{className:c}),o.createElement("span",{className:c})))),o.createElement("div",{className:p},n))}},8400:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>u,default:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>k});var o=t(7462),a=(t(7294),t(3905)),r=t(4996),i=t(941),l=t(1007);const s={id:"solana-bootcamp-Contract-read",title:"1\u3001TokenSwap\u5408\u7ea6\u8d70\u8bfb"},u=void 0,c={unversionedId:"solana/solana-bootcamp/8\u3001Solana DApp\u5f00\u53d1\u5b9e\u8df5 DeFi & NFT/solana-bootcamp-Contract-read",id:"solana/solana-bootcamp/8\u3001Solana DApp\u5f00\u53d1\u5b9e\u8df5 DeFi & NFT/solana-bootcamp-Contract-read",title:"1\u3001TokenSwap\u5408\u7ea6\u8d70\u8bfb",description:"Solana \u5b98\u65b9\u5728 SPL \u91cc\u9762\u7ed9\u4e86\u4e00\u4e2a AMM \u7684\u53c2\u8003\u5b9e\u73b0\uff0c\u5176\u4ee3\u7801\u5728 Token Swap \u76f8\u5e94\u7684\u6587\u6863\u5728 Token Swap Program\u3002",source:"@site/docs/solana/solana-bootcamp/8\u3001Solana DApp\u5f00\u53d1\u5b9e\u8df5 DeFi & NFT/1\u3001TokenSwap\u5408\u7ea6\u8d70\u8bfb.md",sourceDirName:"solana/solana-bootcamp/8\u3001Solana DApp\u5f00\u53d1\u5b9e\u8df5 DeFi & NFT",slug:"/solana/solana-bootcamp/8\u3001Solana DApp\u5f00\u53d1\u5b9e\u8df5 DeFi & NFT/solana-bootcamp-Contract-read",permalink:"/docs/solana/solana-bootcamp/8\u3001Solana DApp\u5f00\u53d1\u5b9e\u8df5 DeFi & NFT/solana-bootcamp-Contract-read",draft:!1,editUrl:"https://github.com/iRoySwift/RoysBlog/tree/master/docs/solana/solana-bootcamp/8\u3001Solana DApp\u5f00\u53d1\u5b9e\u8df5 DeFi & NFT/1\u3001TokenSwap\u5408\u7ea6\u8d70\u8bfb.md",tags:[],version:"current",frontMatter:{id:"solana-bootcamp-Contract-read",title:"1\u3001TokenSwap\u5408\u7ea6\u8d70\u8bfb"},sidebar:"docs",previous:{title:"8\u3001Solana DApp\u5f00\u53d1\u5b9e\u8df5 DeFi & NFT",permalink:"/docs/category/8solana-dapp\u5f00\u53d1\u5b9e\u8df5-defi--nft"},next:{title:"2\u3001Solana\u7684NFT\u4e8b\u5b9e\u6807\u51c6Metaplex",permalink:"/docs/solana/solana-bootcamp/8\u3001Solana DApp\u5f00\u53d1\u5b9e\u8df5 DeFi & NFT/solana-bootcamp-Contract-metaplex"}},p={},k=[{value:"\u57fa\u672c\u64cd\u4f5c",id:"\u57fa\u672c\u64cd\u4f5c",level:2},{value:"\u521b\u5efa\u65b0\u7684\u4ee3\u5e01 Pair",id:"\u521b\u5efa\u65b0\u7684\u4ee3\u5e01-pair",level:3},{value:"Swapping",id:"swapping",level:3},{value:"Depositing liquidity",id:"depositing-liquidity",level:3},{value:"Withdrawing liquidity",id:"withdrawing-liquidity",level:3},{value:"\u524d\u7aef\u90e8\u5206",id:"\u524d\u7aef\u90e8\u5206",level:2},{value:"\u5408\u7ea6\u90e8\u5206",id:"\u5408\u7ea6\u90e8\u5206",level:2},{value:"process_initialize",id:"process_initialize",level:3},{value:"process_deposit_all_token_types",id:"process_deposit_all_token_types",level:3},{value:"process_swap",id:"process_swap",level:3}],m={toc:k};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Solana \u5b98\u65b9\u5728 SPL \u91cc\u9762\u7ed9\u4e86\u4e00\u4e2a AMM \u7684\u53c2\u8003\u5b9e\u73b0\uff0c\u5176\u4ee3\u7801\u5728 ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/solana-labs/solana-program-library/tree/master/token-swap"},"Token Swap")," \u76f8\u5e94\u7684\u6587\u6863\u5728 ",(0,a.kt)("a",{parentName:"p",href:"https://spl.solana.com/token-swap"},"Token Swap Program"),"\u3002"),(0,a.kt)("p",null,"\u8fd9\u4e2a Swap \u5408\u7ea6\u5141\u8bb8\u5728\u6ca1\u6709\u96c6\u4e2d\u9650\u4ef7\u8ba2\u5355\u7c3f\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u4ee3\u5e01\u5bf9\u7684\u7b80\u5355\u4ea4\u6613\u3002\u8be5\u7a0b\u5e8f\u4f7f\u7528\u79f0\u4e3a\u201ccurve\u201d\u7684\u6570\u5b66\u516c\u5f0f\u6765\u8ba1\u7b97\u6240\u6709\u4ea4\u6613\u7684\u4ef7\u683c\u3002\u66f2\u7ebf\u65e8\u5728\u6a21\u4eff\u6b63\u5e38\u7684\u5e02\u573a\u52a8\u6001\uff1a\u4f8b\u5982\uff0c\u5f53\u4ea4\u6613\u8005\u5927\u91cf\u8d2d\u4e70\u4e00\u79cd\u4ee3\u5e01\u7c7b\u578b\u65f6\uff0c\u53e6\u4e00\u79cd\u4ee3\u5e01\u7c7b\u578b\u7684\u4ef7\u503c\u5c31\u4f1a\u4e0a\u6da8\u3002"),(0,a.kt)("p",null,"Pool \u4e2d\u7684\u5b58\u6b3e\u4eba\u4e3a\u4ee3\u5e01\u5bf9\u63d0\u4f9b\u6d41\u52a8\u6027\u3002\u8fd9\u79cd\u6d41\u52a8\u6027\u4f7f\u5f97\u4ea4\u6613\u80fd\u591f\u4ee5\u73b0\u8d27\u4ef7\u683c\u6267\u884c\u3002\u4f5c\u4e3a\u6d41\u52a8\u6027\u7684\u4ea4\u6362\uff0c\u50a8\u6237\u6536\u5230\u77ff\u6c60\u4ee3\u5e01\uff0c\u4ee3\u8868\u4ed6\u4eec\u5728\u77ff\u6c60\u4e2d\u7684\u90e8\u5206\u6240\u6709\u6743\u3002\u5728\u6bcf\u6b21\u4ea4\u6613\u671f\u95f4\uff0c\u7a0b\u5e8f\u90fd\u4f1a\u6263\u7559\u4e00\u90e8\u5206\u8f93\u5165\u4ee3\u5e01\u4f5c\u4e3a\u8d39\u7528\u3002\u8be5\u8d39\u7528\u901a\u8fc7\u5b58\u50a8\u5728\u6c60\u4e2d\u800c\u589e\u52a0\u4e86\u6c60\u4ee3\u5e01\u7684\u4ef7\u503c\u3002"),(0,a.kt)("h2",{id:"\u57fa\u672c\u64cd\u4f5c"},"\u57fa\u672c\u64cd\u4f5c"),(0,a.kt)("h3",{id:"\u521b\u5efa\u65b0\u7684\u4ee3\u5e01-pair"},"\u521b\u5efa\u65b0\u7684\u4ee3\u5e01 Pair"),(0,a.kt)("p",null,"Pool \u7684\u521b\u5efa\u5c55\u793a\u4e86 Solana \u4e0a\u7684\u5e10\u6237\u3001\u6307\u4ee4\u548c\u6388\u6743\u6a21\u578b\uff0c\u8fd9\u4e0e\u5176\u4ed6\u533a\u5757\u94fe\u76f8\u6bd4\u53ef\u80fd\u6709\u5f88\u5927\u4e0d\u540c\u3002"),(0,a.kt)("p",null,"\u4e24\u79cd\u4ee3\u5e01\u7c7b\u578b\u4e4b\u95f4\u7684\u6c60\u7684\u521d\u59cb\u5316\uff08\u4e3a\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u5c06\u5176\u79f0\u4e3a\u201cA\u201d\u548c\u201cB\u201d\uff09\u9700\u8981\u4ee5\u4e0b\u5e10\u6237\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"empty pool state account"),(0,a.kt)("li",{parentName:"ul"},"pool authority"),(0,a.kt)("li",{parentName:"ul"},"token A account"),(0,a.kt)("li",{parentName:"ul"},"token B account"),(0,a.kt)("li",{parentName:"ul"},"pool token mint"),(0,a.kt)("li",{parentName:"ul"},"pool token fee account"),(0,a.kt)("li",{parentName:"ul"},"pool token recipient account"),(0,a.kt)("li",{parentName:"ul"},"token program")),(0,a.kt)("p",null,"\u53ea\u9700\u4f7f\u7528 system_instruction::create_account \u6b63\u786e\u7684\u5927\u5c0f\u548c\u8db3\u591f\u7684 lamport \u6765\u521b\u5efa\u6c60\u72b6\u6001\u5e10\u6237\u5373\u53ef\u514d\u79df\u91d1\u3002"),(0,a.kt)("p",null,"Pool \u6743\u9650\u662f\u4e00\u4e2a PDA \u5730\u5740 \uff0c\u53ef\u4ee5\u201c\u7b7e\u7f72\u201d\u9488\u5bf9\u5176\u4ed6\u7a0b\u5e8f\u7684\u6307\u4ee4\u3002\u8fd9\u662f\u4ee4\u724c\u4ea4\u6362\u8ba1\u5212\u94f8\u9020\u6c60\u4ee4\u724c\u5e76\u4ece\u5176\u4ee4\u724c A \u548c B \u8d26\u6237\u8f6c\u79fb\u4ee4\u724c\u6240\u5fc5\u9700\u7684\u3002"),(0,a.kt)("p",null,"\u4ee3\u5e01 A / B \u8d26\u6237\u3001\u77ff\u6c60\u4ee3\u5e01\u94f8\u9020\u548c\u77ff\u6c60\u4ee3\u5e01\u8d26\u6237\u90fd\u5fc5\u987b\u521b\u5efa\uff08\u4f7f\u7528 system_instruction::create_account\uff09\u5e76\u521d\u59cb\u5316\uff08\u4f7f\u7528 spl_token::instruction::initialize_mint \u6216 spl_token::instruction::initialize_account\uff09\u3002\u4ee3\u5e01 A \u548c B \u8d26\u6237\u5fc5\u987b\u7531\u4ee3\u5e01\u8d44\u52a9\uff0c\u5176\u6240\u6709\u8005\u8bbe\u7f6e\u4e3a\u4ea4\u6362\u673a\u6784\uff0c\u5e76\u4e14\u94f8\u5e01\u5382\u4e5f\u5fc5\u987b\u7531\u4ea4\u6362\u673a\u6784\u62e5\u6709\u3002"),(0,a.kt)("p",null,"\u521b\u5efa\u6240\u6709\u8fd9\u4e9b\u5e10\u6237\u540e\uff0c\u4ee3\u5e01\u4ea4\u6362 initialize \u6307\u4ee4\u5c06\u6b63\u786e\u8bbe\u7f6e\u6240\u6709\u5185\u5bb9\u5e76\u5141\u8bb8\u7acb\u5373\u4ea4\u6613\u3002\u8bf7\u6ce8\u610f\uff0c\u6c60\u72b6\u6001\u5e10\u6237\u4e0d\u9700\u8981\u662f \u7684\u7b7e\u540d\u8005\uff0c\u56e0\u6b64\u5728\u4e0e\u5176 \u76f8\u540c\u7684\u4ea4\u6613\u4e2d initialize \u6267\u884c\u6307\u4ee4\u975e\u5e38\u91cd\u8981\u3002initializesystem_instruction::create_account"),(0,a.kt)("h3",{id:"swapping"},"Swapping"),(0,a.kt)("p",null,"\u521b\u5efa\u6c60\u540e\uff0c\u7528\u6237\u53ef\u4ee5\u7acb\u5373\u4f7f\u7528 swap \u6307\u4ee4\u5f00\u59cb\u5bf9\u5176\u8fdb\u884c\u4ea4\u6613\u3002\u4ea4\u6362\u6307\u4ee4\u5c06\u4ee3\u5e01\u4ece\u7528\u6237\u7684\u6e90\u8d26\u6237\u8f6c\u79fb\u5230\u4ea4\u6362\u7684\u6e90\u4ee3\u5e01\u8d26\u6237\uff0c\u7136\u540e\u5c06\u4ee3\u5e01\u4ece\u5176\u76ee\u6807\u4ee3\u5e01\u8d26\u6237\u8f6c\u79fb\u5230\u7528\u6237\u7684\u76ee\u6807\u4ee3\u5e01\u8d26\u6237\u3002"),(0,a.kt)("p",null,"\u7531\u4e8e Solana \u7a0b\u5e8f\u8981\u6c42\u5728\u6307\u4ee4\u4e2d\u58f0\u660e\u6240\u6709\u8d26\u6237\uff0c\u56e0\u6b64\u7528\u6237\u9700\u8981\u4ece\u6c60\u72b6\u6001\u8d26\u6237\u6536\u96c6\u6240\u6709\u8d26\u6237\u4fe1\u606f\uff1a\u4ee3\u5e01 A \u548c B \u8d26\u6237\u3001\u6c60\u4ee3\u5e01\u94f8\u9020\u548c\u8d39\u7528\u8d26\u6237\u3002"),(0,a.kt)("p",null,"\u6b64\u5916\uff0c\u7528\u6237\u5fc5\u987b\u5141\u8bb8\u4ece\u5176\u6e90\u4ee3\u5e01\u8d26\u6237\u8f6c\u79fb\u4ee3\u5e01\u3002\u6700\u4f73\u5b9e\u8df5\u662f\u5411 spl_token::instruction::approve \u65b0\u7684\u4e00\u6b21\u6027\u5bc6\u94a5\u5bf9\u8f93\u5165\u7cbe\u786e\u7684\u91d1\u989d\uff0c\u7136\u540e\u8ba9\u8be5\u65b0\u5bc6\u94a5\u5bf9\u7b7e\u7f72\u4ea4\u6362\u4ea4\u6613\u3002\u8fd9\u9650\u5236\u4e86\u7a0b\u5e8f\u53ef\u4ee5\u4ece\u7528\u6237\u5e10\u6237\u4e2d\u83b7\u53d6\u7684\u4ee3\u5e01\u6570\u91cf\u3002"),(0,a.kt)("h3",{id:"depositing-liquidity"},"Depositing liquidity"),(0,a.kt)("p",null,"\u4e3a\u4e86\u5141\u8bb8\u4efb\u4f55\u4ea4\u6613\uff0c\u77ff\u6c60\u9700\u8981\u5916\u90e8\u63d0\u4f9b\u7684\u6d41\u52a8\u6027\u3002\u4f7f\u7528 deposit_all_token_types \u6216 deposit_single_token_type_exact_amount_in \u6307\u4ee4\uff0c\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u4e3a\u5176\u4ed6\u4eba\u63d0\u4f9b\u6d41\u52a8\u6027\u8fdb\u884c\u4ea4\u6613\uff0c\u4f5c\u4e3a\u4ea4\u6362\uff0c\u50a8\u6237\u6536\u5230\u4ee3\u8868\u6c60\u4e2d\u6240\u6709 A \u548c B \u4ee3\u5e01\u90e8\u5206\u6240\u6709\u6743\u7684\u6c60\u4ee3\u5e01\u3002"),(0,a.kt)("p",null,"\u6b64\u5916\uff0c\u7528\u6237\u9700\u8981\u6279\u51c6\u59d4\u6258\u4eba\u4ece\u5176 A \u548c B \u4ee3\u5e01\u8d26\u6237\u8f6c\u79fb\u4ee3\u5e01\u3002\u8fd9\u9650\u5236\u4e86\u7a0b\u5e8f\u53ef\u4ee5\u4ece\u7528\u6237\u5e10\u6237\u4e2d\u83b7\u53d6\u7684\u4ee3\u5e01\u6570\u91cf\u3002"),(0,a.kt)("h3",{id:"withdrawing-liquidity"},"Withdrawing liquidity"),(0,a.kt)("p",null,"\u6c60\u4ee3\u5e01\u6301\u6709\u8005\u53ef\u4ee5\u968f\u65f6\u8d4e\u56de\u5176\u6c60\u4ee3\u5e01\u4ee5\u6362\u53d6\u4ee3\u5e01 A \u548c B\uff0c\u5e76\u6309\u66f2\u7ebf\u786e\u5b9a\u7684\u5f53\u524d\u201c\u516c\u5e73\u201d\u5229\u7387\u8fd4\u56de\u3002\u5728 withdraw_all_token_types \u548c withdraw_single_token_type_exact_amount_out \u6307\u4ee4\u4e2d\uff0c\u6c60\u4ee3\u5e01\u88ab\u9500\u6bc1\uff0c\u4ee3\u5e01 A \u548c B \u88ab\u8f6c\u5165\u7528\u6237\u7684\u8d26\u6237\u3002"),(0,a.kt)("p",null,"\u6b64\u5916\uff0c\u7528\u6237\u9700\u8981\u6279\u51c6\u59d4\u6258\u4eba\u4ece\u5176\u4ee3\u5e01\u6c60\u8d26\u6237\u8f6c\u79fb\u4ee3\u5e01\u3002\u8fd9\u9650\u5236\u4e86\u7a0b\u5e8f\u53ef\u4ee5\u4ece\u7528\u6237\u5e10\u6237\u4e2d\u83b7\u53d6\u7684\u4ee3\u5e01\u6570\u91cf\u3002"),(0,a.kt)("h2",{id:"\u524d\u7aef\u90e8\u5206"},"\u524d\u7aef\u90e8\u5206"),(0,a.kt)("p",null,"\u5b98\u65b9\u7684\u5b9e\u73b0\u4e2d\uff0c\u540c\u65f6\u4e3a\u8fd9\u4e2a\u5408\u7ea6\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53c2\u8003\u7684\u524d\u7aef\u5b9e\u73b0\u3002\u56e0\u4e3a\u540e\u7eed Serum/Raydium \u7b49\u9879\u76ee\u7684\u539f\u56e0\uff0c\u8fd9\u4e2a\u53c2\u8003 \u5b9e\u73b0\u540e\u7eed\u6ca1\u6709\u518d\u66f4\u65b0\u4e86\u3002\u4f46\u662f\u901a\u8fc7\u8fd9\u4e2a\u53c2\u8003\u7684\u524d\u7aef\u5df2\u7ecf\u5305\u542b\u4e86\u5bf9\u8fd9\u4e2a Swap \u5408\u7ea6\u7684\u5168\u90e8\u4ea4\u4e92\u3002\u6211\u4eec\u5c06\u4ee3\u7801\u62c9\u4e0b\u6765\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-zsh"},"git clone https://github.com/solana-labs/oyster-swap.git\n")),(0,a.kt)("p",null,"\u56e0\u4e3a\u5e74\u4e45\u5931\u4fee\u7684\u539f\u56e0\uff0c\u76ee\u524d\u8fd9\u4e2a\u524d\u7aef\u4e0d\u4e00\u5b9a\u80fd\u8fd0\u884c\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u4ece\u5176\u4ee3\u7801\u4e2d\uff0c\u4e86\u89e3\u4ee5\u4e0a\u7684\u64cd\u4f5c\u3002"),(0,a.kt)("p",null,'\u5728"src/models/tokenSwap.ts"\u6587\u4ef6\u4e2d\uff0c\u5b9a\u4e49\u4e86\u4e0a\u9762\u8bf4\u7684\u51e0\u4e2a\u529f\u80fd\u7684\u6307\u4ee4\uff1a'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"createInitSwapInstruction,\n  TokenSwapLayout,\n  depositInstruction,\n  withdrawInstruction,\n  TokenSwapLayoutLegacyV0,\n  swapInstruction,\n")),(0,a.kt)("p",null,'\u5176\u4e3b\u8981\u662f\u5bf9 "Token Swap"\u63d0\u4f9b\u7684 JS SDK \u7684\u5c01\u88c5\uff0c\u5728 SDK'),(0,a.kt)("p",null,"\u6bd4\u5982\u521b\u5efa pair \u7684\u6307\u4ee4\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"static createInitSwapInstruction(\n    tokenSwapAccount: Account,\n    authority: PublicKey,\n    tokenAccountA: PublicKey,\n    tokenAccountB: PublicKey,\n    tokenPool: PublicKey,\n    feeAccount: PublicKey,\n    tokenAccountPool: PublicKey,\n    tokenProgramId: PublicKey,\n    swapProgramId: PublicKey,\n    nonce: number,\n    tradeFeeNumerator: number,\n    tradeFeeDenominator: number,\n    ownerTradeFeeNumerator: number,\n    ownerTradeFeeDenominator: number,\n    ownerWithdrawFeeNumerator: number,\n    ownerWithdrawFeeDenominator: number,\n    hostFeeNumerator: number,\n    hostFeeDenominator: number,\n    curveType: number,\n  ): TransactionInstruction {\n    const keys = [\n      {pubkey: tokenSwapAccount.publicKey, isSigner: false, isWritable: true},\n      {pubkey: authority, isSigner: false, isWritable: false},\n      {pubkey: tokenAccountA, isSigner: false, isWritable: false},\n      {pubkey: tokenAccountB, isSigner: false, isWritable: false},\n      {pubkey: tokenPool, isSigner: false, isWritable: true},\n      {pubkey: feeAccount, isSigner: false, isWritable: false},\n      {pubkey: tokenAccountPool, isSigner: false, isWritable: true},\n      {pubkey: tokenProgramId, isSigner: false, isWritable: false},\n    ];\n    const commandDataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u8('nonce'),\n      BufferLayout.nu64('tradeFeeNumerator'),\n      BufferLayout.nu64('tradeFeeDenominator'),\n      BufferLayout.nu64('ownerTradeFeeNumerator'),\n      BufferLayout.nu64('ownerTradeFeeDenominator'),\n      BufferLayout.nu64('ownerWithdrawFeeNumerator'),\n      BufferLayout.nu64('ownerWithdrawFeeDenominator'),\n      BufferLayout.nu64('hostFeeNumerator'),\n      BufferLayout.nu64('hostFeeDenominator'),\n      BufferLayout.u8('curveType'),\n      BufferLayout.blob(32, 'curveParameters'),\n    ]);\n    let data = Buffer.alloc(1024);\n    {\n      const encodeLength = commandDataLayout.encode(\n        {\n          instruction: 0, // InitializeSwap instruction\n          nonce,\n          tradeFeeNumerator,\n          tradeFeeDenominator,\n          ownerTradeFeeNumerator,\n          ownerTradeFeeDenominator,\n          ownerWithdrawFeeNumerator,\n          ownerWithdrawFeeDenominator,\n          hostFeeNumerator,\n          hostFeeDenominator,\n          curveType,\n        },\n        data,\n      );\n      data = data.slice(0, encodeLength);\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: swapProgramId,\n      data,\n    });\n  }\n")),(0,a.kt)("p",null,"\u8fd9\u91cc\u56e0\u4e3a\u4e4b\u524d\u7684\u7cfb\u7edf\u4e2d\uff0c\u6ca1\u6709 Borsh \u4e5f\u6ca1\u6709 Anchor\uff0c\u901a\u8fc7\u624b\u52a8\u7684\u65b9\u5f0f\uff0c\u6392\u5217\u4e86\u8fd9\u91cc\u8981\u7528\u5230\u7684 keys \u548c\u5404\u4e2a\u53c2\u6570\u3002 \u5177\u4f53\u53c2\u6570\u7684\u610f\u4e49\uff0c\u6211\u4eec\u5728\u4e0b\u9762\u7684\u5408\u7ea6\u90e8\u5206\u4f1a\u505a\u8be6\u7ec6\u4ecb\u7ecd\u3002"),(0,a.kt)("h2",{id:"\u5408\u7ea6\u90e8\u5206"},"\u5408\u7ea6\u90e8\u5206"),(0,a.kt)("p",null,"\u6211\u4eec\u6309\u7167\u4e0a\u9762\u7684\u4ee3\u7801\u5730\u5740\uff0c\u627e\u5230 TokenSwap \u7684\u4ee3\u7801\uff0c\u7136\u540e\u8fd9\u91cc\u6211\u4eec checkout \u5230\u4e0a\u9762\u7684\u524d\u7aef\u5bf9\u5e94\u7684\u5408\u7ea6\u7684\u7248\u672c\uff0c\u4e5f\u5c31\u662f 2020 \u5e74 11 \u6708 17 \u65e5\u7684\u63d0\u4ea4\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-zsh"},"git checkout d46f010195c461108030e25f1808126baf1ae810\n")),(0,a.kt)("p",null,"\u9996\u5148\u770b\u5230\u7684\u662f\uff0c\u8fd9\u4e2a Swap \u5408\u7ea6\uff0c\u8ddf\u6211\u4eec\u4e4b\u524d\u4ecb\u7ecd\u7684\u975e anchor \u9879\u76ee\u662f\u7c7b\u4f3c\u7684\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-zsh"},".\n\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 Xargo.toml\n\u251c\u2500\u2500 cbindgen.toml\n\u251c\u2500\u2500 fuzz\n\u2502   \u251c\u2500\u2500 Cargo.toml\n\u2502   \u2514\u2500\u2500 src\n\u251c\u2500\u2500 inc\n\u2502   \u2514\u2500\u2500 token-swap.h\n\u251c\u2500\u2500 sim\n\u2502   \u251c\u2500\u2500 Cargo.lock\n\u2502   \u251c\u2500\u2500 Cargo.toml\n\u2502   \u251c\u2500\u2500 simulation.py\n\u2502   \u2514\u2500\u2500 src\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 constraints.rs\n    \u251c\u2500\u2500 curve\n    \u251c\u2500\u2500 entrypoint.rs\n    \u251c\u2500\u2500 error.rs\n    \u251c\u2500\u2500 instruction.rs\n    \u251c\u2500\u2500 lib.rs\n    \u251c\u2500\u2500 processor.rs\n    \u2514\u2500\u2500 state.rs\n")),(0,a.kt)("p",null,'\u4e3b\u8981\u770b src \u76ee\u5f55\u3002\u8fd9\u91cc\u6709"entrypoint"/"error"/"instruction"/"processor"\u4ee5\u53ca"state"\u3002'),(0,a.kt)("p",null,"\u8fd9\u91cc\u6211\u4eec\u80fd\u770b\u5230\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-zsh"},"169 constraints.rs\n      21 entrypoint.rs\n     104 error.rs\n     721 instruction.rs\n      18 lib.rs\n    6658 processor.rs\n     228 state.rs\n    7919 total\n")),(0,a.kt)("p",null,"\u90a3\u662f\u4e0d\u662f\u8fd9\u4e2a\u5408\u7ea6\u6709 7k \u4ee3\u7801\u91cf\u7684\u590d\u6742\u5462\uff1f\u5176\u5b9e\u4e0d\u662f\u7684\uff0c\u6211\u4eec\u524d\u9762\u5b66\u4e60\u8fc7 rust \u7684\u5355\u5143\u6d4b\u8bd5\uff0c\u5176\u5b9e\u5728 processor \u91cc\u9762 \u5176\u5b9e\u53ea\u6709\u4e00\u5343\u591a\u4e00\u70b9\u7684\u6838\u5fc3\u4ee3\u7801\uff0c\u5176\u4f59\u90e8\u5206\u90fd\u662f\u6d4b\u8bd5\u4ee3\u7801\u3002"),(0,a.kt)("p",null,"\u6211\u4eec\u4ece\u6307\u4ee4\u5f00\u59cb\u770b\u8d77\u6765\uff0c\u603b\u5171\u5b9a\u4e49\u4e86\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"pub enum SwapInstruction {\n    ///   Initializes a new SwapInfo.\n    ///\n    ///   0. `[writable, signer]` New Token-swap to create.\n    ///   1. `[]` $authority derived from `create_program_address(&[Token-swap account])`\n    ///   2. `[]` token_a Account. Must be non zero, owned by $authority.\n    ///   3. `[]` token_b Account. Must be non zero, owned by $authority.\n    ///   4. `[writable]` Pool Token Mint. Must be empty, owned by $authority.\n    ///   5. `[]` Pool Token Account to deposit trading and withdraw fees.\n    ///   Must be empty, not owned by $authority\n    ///   6. `[writable]` Pool Token Account to deposit the initial pool token\n    ///   supply.  Must be empty, not owned by $authority.\n    ///   7. '[]` Token program id\n    Initialize(Initialize),\n\n    ///   Swap the tokens in the pool.\n    ///\n    ///   0. `[]` Token-swap\n    ///   1. `[]` $authority\n    ///   2. `[writable]` token_(A|B) SOURCE Account, amount is transferable by $authority,\n    ///   3. `[writable]` token_(A|B) Base Account to swap INTO.  Must be the SOURCE token.\n    ///   4. `[writable]` token_(A|B) Base Account to swap FROM.  Must be the DESTINATION token.\n    ///   5. `[writable]` token_(A|B) DESTINATION Account assigned to USER as the owner.\n    ///   6. `[writable]` Pool token mint, to generate trading fees\n    ///   7. `[writable]` Fee account, to receive trading fees\n    ///   8. '[]` Token program id\n    ///   9. `[optional, writable]` Host fee account to receive additional trading fees\n    Swap(Swap),\n\n    ///   Deposit both types of tokens into the pool.  The output is a \"pool\"\n    ///   token representing ownership in the pool. Inputs are converted to\n    ///   the current ratio.\n    ///\n    ///   0. `[]` Token-swap\n    ///   1. `[]` $authority\n    ///   2. `[writable]` token_a $authority can transfer amount,\n    ///   3. `[writable]` token_b $authority can transfer amount,\n    ///   4. `[writable]` token_a Base Account to deposit into.\n    ///   5. `[writable]` token_b Base Account to deposit into.\n    ///   6. `[writable]` Pool MINT account, $authority is the owner.\n    ///   7. `[writable]` Pool Account to deposit the generated tokens, user is the owner.\n    ///   8. '[]` Token program id\n    DepositAllTokenTypes(DepositAllTokenTypes),\n\n    ///   Withdraw both types of tokens from the pool at the current ratio, given\n    ///   pool tokens.  The pool tokens are burned in exchange for an equivalent\n    ///   amount of token A and B.\n    ///\n    ///   0. `[]` Token-swap\n    ///   1. `[]` $authority\n    ///   2. `[writable]` Pool mint account, $authority is the owner\n    ///   3. `[writable]` SOURCE Pool account, amount is transferable by $authority.\n    ///   4. `[writable]` token_a Swap Account to withdraw FROM.\n    ///   5. `[writable]` token_b Swap Account to withdraw FROM.\n    ///   6. `[writable]` token_a user Account to credit.\n    ///   7. `[writable]` token_b user Account to credit.\n    ///   8. `[writable]` Fee account, to receive withdrawal fees\n    ///   9. '[]` Token program id\n    WithdrawAllTokenTypes(WithdrawAllTokenTypes),\n\n    ///   Deposit one type of tokens into the pool.  The output is a \"pool\" token\n    ///   representing ownership into the pool. Input token is converted as if\n    ///   a swap and deposit all token types were performed.\n    ///\n    ///   0. `[]` Token-swap\n    ///   1. `[]` $authority\n    ///   2. `[writable]` token_(A|B) SOURCE Account, amount is transferable by $authority,\n    ///   3. `[writable]` token_a Swap Account, may deposit INTO.\n    ///   4. `[writable]` token_b Swap Account, may deposit INTO.\n    ///   5. `[writable]` Pool MINT account, $authority is the owner.\n    ///   6. `[writable]` Pool Account to deposit the generated tokens, user is the owner.\n    ///   7. '[]` Token program id\n    DepositSingleTokenTypeExactAmountIn(DepositSingleTokenTypeExactAmountIn),\n\n    ///   Withdraw one token type from the pool at the current ratio given the\n    ///   exact amount out expected.\n    ///\n    ///   0. `[]` Token-swap\n    ///   1. `[]` $authority\n    ///   2. `[writable]` Pool mint account, $authority is the owner\n    ///   3. `[writable]` SOURCE Pool account, amount is transferable by $authority.\n    ///   4. `[writable]` token_a Swap Account to potentially withdraw from.\n    ///   5. `[writable]` token_b Swap Account to potentially withdraw from.\n    ///   6. `[writable]` token_(A|B) User Account to credit\n    ///   7. `[writable]` Fee account, to receive withdrawal fees\n    ///   8. '[]` Token program id\n    WithdrawSingleTokenTypeExactAmountOut(WithdrawSingleTokenTypeExactAmountOut),\n}\n")),(0,a.kt)("p",null,"\u603b\u5171\u6709 6 \u4e2a\u6307\u4ee4\u3002\u5206\u522b\u662f\u521b\u5efa pair,swap\uff0c\u62b5\u62bc\u548c\u63d0\u53d6 pair \u4ee5\u53ca\u62b5\u62bc\u548c\u63d0\u53d6\u5355\u4e2a token\u3002\u6211\u4eec\u4e3b\u8981\u6765\u770b\u524d\u56db\u79cd\u3002"),(0,a.kt)("p",null,"\u5728 state \u91cc\u9762\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5b58\u50a8\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"pub struct SwapInfo {\n    /// Initialized state.\n    pub is_initialized: bool,\n    /// Nonce used in program address.\n    /// The program address is created deterministically with the nonce,\n    /// swap program id, and swap account pubkey.  This program address has\n    /// authority over the swap's token A account, token B account, and pool\n    /// token mint.\n    pub nonce: u8,\n\n    /// Program ID of the tokens being exchanged.\n    pub token_program_id: Pubkey,\n\n    /// Token A\n    pub token_a: Pubkey,\n    /// Token B\n    pub token_b: Pubkey,\n\n    /// Pool tokens are issued when A or B tokens are deposited.\n    /// Pool tokens can be withdrawn back to the original A or B token.\n    pub pool_mint: Pubkey,\n\n    /// Mint information for token A\n    pub token_a_mint: Pubkey,\n    /// Mint information for token B\n    pub token_b_mint: Pubkey,\n\n    /// Pool token account to receive trading and / or withdrawal fees\n    pub pool_fee_account: Pubkey,\n\n    /// All fee information\n    pub fees: Fees,\n\n    /// Swap curve parameters, to be unpacked and used by the SwapCurve, which\n    /// calculates swaps, deposits, and withdrawals\n    pub swap_curve: SwapCurve,\n}\n")),(0,a.kt)("p",null,"\u8fd9\u4e2a\u5c31\u7c7b\u4f3c univ2 \u91cc\u9762\u7684 pair\u3002\u5176\u8868\u793a token_a_mint \u548c token_b_mint \u7684\u4e00\u4e2a pair\u3002pool \u4e2d\u76f8\u5e94\u7684 token \u5b58\u653e\u5728 token account \u4e2d\u4e5f\u5c31\u662f\u4e0a\u9762\u7684 token_a \u548c token_b,\u5bf9\u5e94\u7684 LP Token \u4e3a pool_mint\u3002swap_curve \u7528\u4e8e\u8bb0\u5f55 curve \u6570\u636e\u4fe1\u606f\u3002\u5176\u5b9a\u4e49\u4e3a\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"pub struct SwapCurve {\n    /// The type of curve contained in the calculator, helpful for outside\n    /// queries\n    pub curve_type: CurveType,\n    /// The actual calculator, represented as a trait object to allow for many\n    /// different types of curves\n    pub calculator: Box<dyn CurveCalculator>,\n}\n")),(0,a.kt)("p",null,"\u8fd9\u91cc CurveCalculator \u4e3b\u8981\u6709\u56db\u79cd\u5b9e\u73b0\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"impl CurveCalculator for ConstantPriceCurve /// Constant price curve always returns 1:1")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"impl CurveCalculator for ConstantProductCurve /// Constant product swap ensures x ","_"," y = constant")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"impl CurveCalculator for StableCurve /// Stable curve")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"impl CurveCalculator for OffsetCurve /// Constant product swap ensures token a ","_"," (token b + offset) = constant /// This is guaranteed to work for all values such that: /// - 1 <= source_amount <= u64::MAX /// - 1 <= (swap_source_amount ","*"," (swap_destination_amount + token_b_offset)) <= u128::MAX /// If the offset and token B are both close to u64::MAX, there can be /// overflow errors with the invariant."),(0,a.kt)("p",{parentName:"li"},'\u7c7b\u6bd4\u5230\u6700\u5bb9\u6613\u7406\u89e3\u7684 UniV2\uff0c\u6211\u4eec\u8fd9\u91cc\u4e3b\u8981\u6765\u770b"ConstantProductCurve"\u3002'))),(0,a.kt)("p",null,"\u6240\u4ee5\u6574\u4f53\u7ed3\u6784\u5c31\u662f\u8fd9\u6837\u7684\uff1a"),(0,a.kt)(l.Z,{minHeight:240,mdxType:"BrowserWindow"},(0,a.kt)(i.Z,{alt:"Docusaurus themed image",sources:{light:(0,r.Z)("/img/solana/swap_process.png"),dark:(0,r.Z)("/img/solana/swap_process.png")},mdxType:"ThemedImage"})),(0,a.kt)("p",null,"\u4ee5 process \u4e3a\u5165\u53e3\uff0c\u7136\u540e\u8bfb\u53d6 swapinfo \u4e2d\u7684 token \u4fe1\u606f\u4ee5\u53ca\u6570\u91cf\u7b49\uff0c\u6700\u540e\u901a\u8fc7\u9009\u5b9a\u7684 curve \u505a\u8ba1\u7b97\u3002"),(0,a.kt)("h3",{id:"process_initialize"},"process_initialize"),(0,a.kt)("p",null,"\u9996\u5148\u89e3\u6790\u5404\u4e2a key\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"let account_info_iter = &mut accounts.iter();\n        let swap_info = next_account_info(account_info_iter)?;\n        let authority_info = next_account_info(account_info_iter)?;\n        let token_a_info = next_account_info(account_info_iter)?;\n        let token_b_info = next_account_info(account_info_iter)?;\n        let pool_mint_info = next_account_info(account_info_iter)?;\n        let fee_account_info = next_account_info(account_info_iter)?;\n        let destination_info = next_account_info(account_info_iter)?;\n        let token_program_info = next_account_info(account_info_iter)?;\n\n        let token_program_id = *token_program_info.key;\n        let token_swap = SwapInfo::unpack_unchecked(&swap_info.data.borrow())?;\n")),(0,a.kt)("p",null,"\u7136\u540e\u7528 Self::unpack_token_account \u5c06\u9700\u8981\u8bfb\u53d6 data \u90e8\u5206\u7684 account \u505a\u89e3\u6790\u3002"),(0,a.kt)("p",null,"\u63a5\u7740\u662f\u4e00\u5bf9\u7684\u5b89\u5168\u503c check\u3002\u5982"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"if *authority_info.key != token_a.owner {\n            return Err(SwapError::InvalidOwner.into());\n        }\n")),(0,a.kt)("p",null,"\u68c0\u67e5\u5b8c\u4e86\u4ee5\u540e\uff0c\u521d\u59cb\u5316 curve:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"swap_curve\n            .calculator\n            .validate_supply(token_a.amount, token_b.amount)?;\n\n        ...\n        swap_curve.calculator.validate()?;\n        ....\n")),(0,a.kt)("p",null,"\u6700\u540e\u5c06 pair \u7684\u4fe1\u606f\u8bb0\u5f55\u4e0b\u6765\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"let obj = SwapInfo {\n            is_initialized: true,\n            nonce,\n            token_program_id,\n            token_a: *token_a_info.key,\n            token_b: *token_b_info.key,\n            pool_mint: *pool_mint_info.key,\n            token_a_mint: token_a.mint,\n            token_b_mint: token_b.mint,\n            pool_fee_account: *fee_account_info.key,\n            fees,\n            swap_curve,\n        };\n        SwapInfo::pack(obj, &mut swap_info.data.borrow_mut())?;\n")),(0,a.kt)("p",null,"\u5c06 SwapInfo \u4fe1\u606f\u5199\u5165\u3002"),(0,a.kt)("h3",{id:"process_deposit_all_token_types"},"process_deposit_all_token_types"),(0,a.kt)("p",null,"\u9996\u5148\u4e5f\u662f\u89e3\u6790 key \u90e8\u5206\u7684 Account \u548c\u76f8\u5e94\u7684 data \u90e8\u5206\u7684 unpack,\u8fd9\u91cc\u5c31\u4e0d\u622a\u4ee3\u7801\u4e86\u3002"),(0,a.kt)("p",null,"\u7136\u540e\u5c06 check \u90e8\u5206\u5c01\u88c5\u5728 check_accounts \u51fd\u6570\u4e2d\uff0c\u505a\u68c0\u67e5\u3002"),(0,a.kt)("p",null,"\u7136\u540e\u5c31\u662f\u771f\u6b63\u7684\u903b\u8f91\u90e8\u5206\uff0c\u901a\u8fc7 curve \u8ba1\u7b97\u53ef\u4ee5\u7684\u8f93\u51fa\u6570\u91cf\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"let calculator = token_swap.swap_curve.calculator;\n\n        let results = calculator\n            .pool_tokens_to_trading_tokens(\n                pool_token_amount,\n                new_pool_mint_supply,\n                to_u128(token_a.amount)?,\n                to_u128(token_b.amount)?,\n            )\n            .ok_or(SwapError::ZeroTradingTokens)?;\n")),(0,a.kt)("p",null,"\u7b97\u597d\u4e86\u76f8\u5173\u7684\u8f93\u51fa\uff0c\u6536\u53d6 token A/B\uff0c\u5e76\u7ed9\u7528\u6237\u53d1\u9001 LP:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"Self::token_transfer(\n            swap_info.key,\n            token_program_info.clone(),\n            source_a_info.clone(),\n            token_a_info.clone(),\n            authority_info.clone(),\n            token_swap.nonce,\n            token_a_amount,\n        )?;\n        Self::token_transfer(\n            swap_info.key,\n            token_program_info.clone(),\n            source_b_info.clone(),\n            token_b_info.clone(),\n            authority_info.clone(),\n            token_swap.nonce,\n            token_b_amount,\n        )?;\n        Self::token_mint_to(\n            swap_info.key,\n            token_program_info.clone(),\n            pool_mint_info.clone(),\n            dest_info.clone(),\n            authority_info.clone(),\n            token_swap.nonce,\n            to_u64(pool_token_amount)?,\n        )?;\n")),(0,a.kt)("h3",{id:"process_swap"},"process_swap"),(0,a.kt)("p",null,"\u9996\u5148\u4e5f\u662f\u5bf9 Key \u548c data \u90e8\u5206\u505a\u89e3\u6790\u3002\u7136\u540e\u505a\u76f8\u5e94\u7684\u4fe1\u606f\u68c0\u67e5\u3002\u68c0\u67e5\u5b8c\u540e\uff0c\u901a\u8fc7 SwapInfo \u4e2d\u7684 Curve \u8fdb\u884c\u8ba1\u7b97\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"let result = token_swap\n            .swap_curve\n            .swap(\n                to_u128(amount_in)?,\n                to_u128(source_account.amount)?,\n                to_u128(dest_account.amount)?,\n                trade_direction,\n                &token_swap.fees,\n            )\n            .ok_or(SwapError::ZeroTradingTokens)?;\n")),(0,a.kt)("p",null,"\u8ba1\u7b97\u5b8c\u6210\u540e\uff0c\u505a Token A/B \u7684\u4ea4\u6362"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"Self::token_transfer(\n            swap_info.key,\n            token_program_info.clone(),\n            source_info.clone(),\n            swap_source_info.clone(),\n            authority_info.clone(),\n            token_swap.nonce,\n            to_u64(result.source_amount_swapped)?,\n        )?;\n        Self::token_transfer(\n            swap_info.key,\n            token_program_info.clone(),\n            swap_destination_info.clone(),\n            destination_info.clone(),\n            authority_info.clone(),\n            token_swap.nonce,\n            to_u64(result.destination_amount_swapped)?,\n        )?;\n")),(0,a.kt)("p",null,"\u6700\u540e\u662f\u505a fee \u7684\u8ba1\u7b97\u548c\u5206\u914d\u3002"),(0,a.kt)("p",null,"\u53e6\u5916\u4e09\u4e2a\u6307\u4ee4\u7684\u64cd\u4f5c\uff0c\u57fa\u672c\u7c7b\u4f3c\u3002\u6574\u4e2a\u903b\u8f91\u53ef\u4ee5\u7c7b\u6bd4 ",(0,a.kt)("a",{parentName:"p",href:"https://uniswap.org/"},"UniV2")," \u548c ",(0,a.kt)("a",{parentName:"p",href:"https://balancer.finance/"},"Banlancer")," \u7684\u7b97\u6cd5"))}d.isMDXComponent=!0}}]);