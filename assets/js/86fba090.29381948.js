"use strict";(self.webpackChunkroys_blog=self.webpackChunkroys_blog||[]).push([[4274],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>b});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=a.createContext({}),i=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=i(e.components);return a.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=i(t),b=o,m=p["".concat(c,".").concat(b)]||p[b]||d[b]||s;return t?a.createElement(m,r(r({ref:n},u),{},{components:t})):a.createElement(m,r({ref:n},u))}));function b(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,r=new Array(s);r[0]=p;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var i=2;i<s;i++)r[i]=t[i];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},1007:(e,n,t)=>{t.d(n,{Z:()=>p});var a=t(7294);const o="browserWindow_my1Q",s="browserWindowHeader_jXSR",r="buttons_uHc7",l="browserWindowAddressBar_Pd8y",c="dot_giz1",i="browserWindowMenuIcon_Vhuh",u="bar_rrRL",d="browserWindowBody_Idgs";function p(e){let{children:n,minHeight:t,url:p="http://localhost:3000"}=e;return a.createElement("div",{className:o,style:{minHeight:t}},a.createElement("div",{className:s},a.createElement("div",{className:r},a.createElement("span",{className:c,style:{background:"#f25f58"}}),a.createElement("span",{className:c,style:{background:"#fbbe3c"}}),a.createElement("span",{className:c,style:{background:"#58cb42"}})),a.createElement("div",{className:l},p),a.createElement("div",{className:i},a.createElement("div",null,a.createElement("span",{className:u}),a.createElement("span",{className:u}),a.createElement("span",{className:u})))),a.createElement("div",{className:d},n))}},2055:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>c,metadata:()=>u,toc:()=>p});var a=t(7462),o=(t(7294),t(3905)),s=t(4996),r=t(941),l=t(1007);const c={id:"solana-Contract-alts",title:"1\u3001ALTs\u4ea4\u6613"},i=void 0,u={unversionedId:"solana/solana-bootcamp/7\u3001Solana\u5408\u7ea6\u5f00\u53d1\u8fdb\u9636/solana-Contract-alts",id:"solana/solana-bootcamp/7\u3001Solana\u5408\u7ea6\u5f00\u53d1\u8fdb\u9636/solana-Contract-alts",title:"1\u3001ALTs\u4ea4\u6613",description:"\u4f20\u8f93\u5230 Solana \u9a8c\u8bc1\u5668\u7684\u6d88\u606f\u4e0d\u5f97\u8d85\u8fc7 IPv6 MTU \u5927\u5c0f\uff0c\u4ee5\u786e\u4fdd\u901a\u8fc7 UDP \u5feb\u901f\u53ef\u9760\u5730\u8fdb\u884c\u96c6\u7fa4\u4fe1\u606f\u7f51\u7edc\u4f20\u8f93\u3002Solana \u7684\u7f51\u7edc\u5806\u6808\u4f7f\u7528 1280 \u5b57\u8282\u7684\u4fdd\u5b88 MTU \u5927\u5c0f\uff0c\u5728\u8003\u8651\u6807\u5934\u540e\uff0c\u4e3a\u6570\u636e\u5305\u6570\u636e\uff08\u5982\u5e8f\u5217\u5316\u4e8b\u52a1\uff09\u7559\u4e0b 1232 \u5b57\u8282\u3002",source:"@site/docs/solana/solana-bootcamp/7\u3001Solana\u5408\u7ea6\u5f00\u53d1\u8fdb\u9636/1\u3001ALTs \u4ea4\u6613.md",sourceDirName:"solana/solana-bootcamp/7\u3001Solana\u5408\u7ea6\u5f00\u53d1\u8fdb\u9636",slug:"/solana/solana-bootcamp/7\u3001Solana\u5408\u7ea6\u5f00\u53d1\u8fdb\u9636/solana-Contract-alts",permalink:"/docs/solana/solana-bootcamp/7\u3001Solana\u5408\u7ea6\u5f00\u53d1\u8fdb\u9636/solana-Contract-alts",draft:!1,editUrl:"https://github.com/iRoySwift/RoysBlog/tree/master/docs/solana/solana-bootcamp/7\u3001Solana\u5408\u7ea6\u5f00\u53d1\u8fdb\u9636/1\u3001ALTs \u4ea4\u6613.md",tags:[],version:"current",frontMatter:{id:"solana-Contract-alts",title:"1\u3001ALTs\u4ea4\u6613"},sidebar:"docs",previous:{title:"7\u3001Solana\u5408\u7ea6\u5f00\u53d1\u8fdb\u9636",permalink:"/docs/category/7solana\u5408\u7ea6\u5f00\u53d1\u8fdb\u9636"},next:{title:"2\u3001Solana\u5e8f\u5217\u5316\u6807\u51c6Anchor\u534f\u8bae",permalink:"/docs/solana/solana-bootcamp/7\u3001Solana\u5408\u7ea6\u5f00\u53d1\u8fdb\u9636/solana-Contract-serializes-achor-protocol"}},d={},p=[{value:"ALT",id:"alt",level:2},{value:"\u7248\u672c\u5316\u4ea4\u6613",id:"\u7248\u672c\u5316\u4ea4\u6613",level:2},{value:"ALT \u4f7f\u7528",id:"alt-\u4f7f\u7528",level:2},{value:"\u5b9e\u4f8b",id:"\u5b9e\u4f8b",level:2}],b={toc:p};function m(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},b,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u4f20\u8f93\u5230 Solana \u9a8c\u8bc1\u5668\u7684\u6d88\u606f\u4e0d\u5f97\u8d85\u8fc7 IPv6 MTU \u5927\u5c0f\uff0c\u4ee5\u786e\u4fdd\u901a\u8fc7 UDP \u5feb\u901f\u53ef\u9760\u5730\u8fdb\u884c\u96c6\u7fa4\u4fe1\u606f\u7f51\u7edc\u4f20\u8f93\u3002Solana \u7684\u7f51\u7edc\u5806\u6808\u4f7f\u7528 1280 \u5b57\u8282\u7684\u4fdd\u5b88 MTU \u5927\u5c0f\uff0c\u5728\u8003\u8651\u6807\u5934\u540e\uff0c\u4e3a\u6570\u636e\u5305\u6570\u636e\uff08\u5982\u5e8f\u5217\u5316\u4e8b\u52a1\uff09\u7559\u4e0b 1232 \u5b57\u8282\u3002"),(0,o.kt)("p",null,"\u5728 Solana \u4e0a\u6784\u5efa\u5e94\u7528\u7a0b\u5e8f\u7684\u5f00\u53d1\u4eba\u5458\u5fc5\u987b\u5728\u4e0a\u8ff0\u4ea4\u6613\u5927\u5c0f\u9650\u5236\u7ea6\u675f\u5185\u8bbe\u8ba1\u5176\u94fe\u4e0a\u7a0b\u5e8f\u63a5\u53e3\u3002\u4e00\u79cd\u5e38\u89c1\u7684\u89e3\u51b3\u65b9\u6cd5\u662f\u5c06\u72b6\u6001\u4e34\u65f6\u5b58\u50a8\u5728\u94fe\u4e0a\u5e76\u5728\u4ee5\u540e\u7684\u4ea4\u6613\u4e2d\u4f7f\u7528\u8be5\u72b6\u6001\u3002\u8fd9\u662f BPF \u52a0\u8f7d\u7a0b\u5e8f\u7528\u4e8e\u90e8\u7f72 Solana \u7a0b\u5e8f\u7684\u65b9\u6cd5\u3002"),(0,o.kt)("p",null,"\u7136\u800c\uff0c\u5f53\u5f00\u53d1\u4eba\u5458\u5728\u5355\u4e2a\u539f\u5b50\u4e8b\u52a1\u4e2d\u7f16\u5199\u8bb8\u591a\u94fe\u4e0a\u7a0b\u5e8f\u65f6\uff0c\u8fd9\u79cd\u89e3\u51b3\u65b9\u6cd5\u6548\u679c\u4e0d\u4f73\u3002\u7ec4\u5408\u8d8a\u591a\uff0c\u5e10\u6237\u8f93\u5165\u5c31\u8d8a\u591a\uff0c\u6bcf\u4e2a\u5e10\u6237\u8f93\u5165\u5360\u7528 32 \u4e2a\u5b57\u8282\u3002\u76ee\u524d\u6ca1\u6709\u53ef\u7528\u7684\u89e3\u51b3\u65b9\u6cd5\u6765\u589e\u52a0\u5355\u4e2a\u4e8b\u52a1\u4e2d\u4f7f\u7528\u7684\u5e10\u6237\u6570\u91cf\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u4e8b\u52a1\u5fc5\u987b\u5217\u51fa\u6b63\u786e\u9501\u5b9a\u5e10\u6237\u4ee5\u8fdb\u884c\u5e76\u884c\u6267\u884c\u6240\u9700\u7684\u6240\u6709\u5e10\u6237\u3002\u56e0\u6b64\uff0c\u5728\u8003\u8651\u7b7e\u540d\u548c\u5176\u4ed6\u4ea4\u6613\u5143\u6570\u636e\u540e\uff0c\u5f53\u524d\u4e0a\u9650\u7ea6\u4e3a 35 \u4e2a\u8d26\u6237\u3002"),(0,o.kt)("p",null,"\u5730\u5740\u67e5\u627e\u8868\u901a\u5e38\u7b80\u79f0\u4e3a\u201c\u67e5\u627e\u8868\u201d\u6216\u7b80\u79f0\u201c ALT \u201d\uff0c\u5141\u8bb8\u5f00\u53d1\u4eba\u5458\u521b\u5efa\u76f8\u5173\u5730\u5740\u7684\u96c6\u5408\uff0c\u4ee5\u4fbf\u5728\u5355\u4e2a\u4e8b\u52a1\u4e2d\u6709\u6548\u5730\u52a0\u8f7d\u66f4\u591a\u5730\u5740\u3002"),(0,o.kt)("p",null,"\u7531\u4e8e Solana \u533a\u5757\u94fe\u4e0a\u7684\u6bcf\u7b14\u4ea4\u6613\u90fd\u9700\u8981\u5217\u51fa\u4f5c\u4e3a\u4ea4\u6613\u4e00\u90e8\u5206\u8fdb\u884c\u4ea4\u4e92\u7684\u6bcf\u4e2a\u5730\u5740\uff0c\u56e0\u6b64\u8be5\u5217\u8868\u5b9e\u9645\u4e0a\u5c06\u9650\u5236\u6bcf\u7b14\u4ea4\u6613\u7684 32 \u4e2a\u5730\u5740\u3002\u5728\u5730\u5740\u67e5\u627e\u8868\u7684\u5e2e\u52a9\u4e0b\uff0c\u4e00\u7b14\u4ea4\u6613\u73b0\u5728\u53ef\u4ee5\u5c06\u8be5\u9650\u5236\u63d0\u9ad8\u5230\u6bcf\u7b14\u4ea4\u6613 256 \u4e2a\u5730\u5740\u3002"),(0,o.kt)("h2",{id:"alt"},"ALT"),(0,o.kt)("p",null,"\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u63cf\u8ff0\u4e86\u4e00\u4e2a\u57fa\u4e8e\u7a0b\u5e8f\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u534f\u8bae\u5f00\u53d1\u4eba\u5458\u6216\u6700\u7ec8\u7528\u6237\u53ef\u4ee5\u5728\u94fe\u4e0a\u521b\u5efa\u76f8\u5173\u5730\u5740\u7684\u96c6\u5408\uff0c\u4ee5\u4fbf\u5728\u4ea4\u6613\u7684\u5e10\u6237\u8f93\u5165\u4e2d\u7b80\u6d01\u4f7f\u7528\u3002"),(0,o.kt)("p",null,"\u5730\u5740\u5b58\u50a8\u5728\u94fe\u4e0a\u5730\u5740\u67e5\u627e\u8868\u8d26\u6237\u4e2d\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528 1 \u5b57\u8282 u8 \u7d22\u5f15\u800c\u4e0d\u662f\u5b8c\u6574\u7684 32 \u5b57\u8282\u5730\u5740\u5728\u4ea4\u6613\u4e2d\u7b80\u6d01\u5730\u5f15\u7528\u5b83\u4eec\u3002\u8fd9\u5c06\u9700\u8981\u4e00\u79cd\u65b0\u7684\u4ea4\u6613\u683c\u5f0f\u6765\u5229\u7528\u8fd9\u4e9b\u7b80\u6d01\u7684\u5f15\u7528\u4ee5\u53ca\u8fd0\u884c\u65f6\u5904\u7406\u6765\u4ece\u94fe\u4e0a\u67e5\u627e\u8868\u4e2d\u67e5\u627e\u548c\u52a0\u8f7d\u5730\u5740\u3002"),(0,o.kt)("p",null,"\u5730\u5740\u67e5\u627e\u8868\u5728\u521d\u59cb\u5316\u65f6\u4ee5\u53ca\u6bcf\u6b21\u6dfb\u52a0\u65b0\u5730\u5740\u540e\u90fd\u5fc5\u987b\u514d\u79df\u3002\u67e5\u627e\u8868\u53ef\u4ee5\u4ece\u94fe\u4e0a\u7f13\u51b2\u7684\u5730\u5740\u5217\u8868\u6269\u5c55\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u6307\u4ee4\u6570\u636e\u9644\u52a0\u5730\u5740\u6765\u6269\u5c55\u3002\u65b0\u6dfb\u52a0\u7684\u5730\u5740\u9700\u8981\u4e00\u4e2a\u69fd\u4f4d\u8fdb\u884c\u9884\u70ed\uff0c\u7136\u540e\u624d\u80fd\u4f9b\u4ea4\u6613\u8fdb\u884c\u67e5\u627e\u3002"),(0,o.kt)("p",null,"\u7531\u4e8e\u4e8b\u52a1\u4f7f\u7528 u8 \u7d22\u5f15\u6765\u67e5\u627e\u5730\u5740\uff0c\u56e0\u6b64\u6bcf\u4e2a\u5730\u5740\u8868\u6700\u591a\u53ef\u4ee5\u5b58\u50a8 256 \u4e2a\u5730\u5740\u3002\u9664\u4e86\u5b58\u50a8\u7684\u5730\u5740\u4e4b\u5916\uff0c\u5730\u5740\u8868\u5e10\u6237\u8fd8\u8ddf\u8e2a\u4e0b\u9762\u89e3\u91ca\u7684\u5404\u79cd\u5143\u6570\u636e\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"/// The maximum number of addresses that a lookup table can hold\npub const LOOKUP_TABLE_MAX_ADDRESSES: usize = 256;\n\n/// The serialized size of lookup table metadata\npub const LOOKUP_TABLE_META_SIZE: usize = 56;\n\npub struct LookupTableMeta {\n    /// Lookup tables cannot be closed until the deactivation slot is\n    /// no longer \"recent\" (not accessible in the `SlotHashes` sysvar).\n    pub deactivation_slot: Slot,\n    /// The slot that the table was last extended. Address tables may\n    /// only be used to lookup addresses that were extended before\n    /// the current bank's slot.\n    pub last_extended_slot: Slot,\n    /// The start index where the table was last extended from during\n    /// the `last_extended_slot`.\n    pub last_extended_slot_start_index: u8,\n    /// Authority address which must sign for each modification.\n    pub authority: Option<Pubkey>,\n    // Raw list of addresses follows this serialized structure in\n    // the account's data, starting from `LOOKUP_TABLE_META_SIZE`.\n}\n")),(0,o.kt)("p",null,"\u4e00\u65e6\u4e0d\u518d\u9700\u8981\u5730\u5740\u67e5\u627e\u8868\uff0c\u5c31\u53ef\u4ee5\u5c06\u5176\u505c\u7528\u5e76\u5173\u95ed\u4ee5\u56de\u6536\u5176\u79df\u91d1\u4f59\u989d\u3002\u5730\u5740\u67e5\u627e\u8868\u4e0d\u80fd\u5728\u540c\u4e00\u5730\u5740\u91cd\u65b0\u521b\u5efa\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u65b0\u7684\u67e5\u627e\u8868\u5fc5\u987b\u5728\u4ece\u6700\u8fd1\u7684\u69fd\u6d3e\u751f\u7684\u5730\u5740\u5904\u521d\u59cb\u5316\u3002"),(0,o.kt)("p",null,"\u5730\u5740\u67e5\u627e\u8868\u53ef\u4ee5\u968f\u65f6\u505c\u7528\uff0c\u4f46\u53ef\u4ee5\u7ee7\u7eed\u88ab\u4e8b\u52a1\u4f7f\u7528\uff0c\u76f4\u5230\u505c\u7528\u69fd\u4e0d\u518d\u51fa\u73b0\u5728\u69fd\u54c8\u5e0c sysvar \u4e2d\u3002\u6b64\u51b7\u5374\u671f\u53ef\u786e\u4fdd\u6b63\u5728\u8fdb\u884c\u7684\u4e8b\u52a1\u65e0\u6cd5\u88ab\u5ba1\u67e5\uff0c\u5e76\u4e14\u5730\u5740\u67e5\u627e\u8868\u65e0\u6cd5\u5173\u95ed\u5e76\u4e3a\u540c\u4e00\u69fd\u91cd\u65b0\u521b\u5efa\u3002"),(0,o.kt)("h2",{id:"\u7248\u672c\u5316\u4ea4\u6613"},"\u7248\u672c\u5316\u4ea4\u6613"),(0,o.kt)("p",null,"\u4e3a\u4e86\u652f\u6301\u4e0a\u8ff0\u7684 ALT\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u4ea4\u6613\u6570\u636e\u5185\u5bb9\u505a\u4fee\u6539\uff0c\u56e0\u6b64\u533a\u522b\u4e8e\u539f\u59cb\u7684\u4ea4\u6613\uff08legacy\uff09\uff0c\u65b0\u4ea4\u6613\u4f7f\u7528\u4e86 VersionedTransaction:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},'#[derive(Serialize, Deserialize)]\npub struct VersionedTransaction {\n    /// List of signatures\n    #[serde(with = "short_vec")]\n    pub signatures: Vec<Signature>,\n    /// Message to sign.\n    pub message: VersionedMessage,\n}\n\n// Uses custom serialization. If the first bit is set, the remaining bits\n// in the first byte will encode a version number. If the first bit is not\n// set, the first byte will be treated as the first byte of an encoded\n// legacy message.\npub enum VersionedMessage {\n    Legacy(LegacyMessage),\n    V0(v0::Message),\n}\n\n// The structure of the new v0 Message\n#[derive(Serialize, Deserialize)]\npub struct Message {\n    // unchanged\n    pub header: MessageHeader,\n\n    // unchanged\n    #[serde(with = "short_vec")]\n    pub account_keys: Vec<Pubkey>,\n\n    // unchanged\n    pub recent_blockhash: Hash,\n\n    // unchanged\n    //\n    // # Notes\n    //\n    // Account and program indexes will index into the list of addresses\n    // constructed from the concatenation of three key lists:\n    //   1) message `account_keys`\n    //   2) ordered list of keys loaded from address table `writable_indexes`\n    //   3) ordered list of keys loaded from address table `readonly_indexes`\n    #[serde(with = "short_vec")]\n    pub instructions: Vec<CompiledInstruction>,\n\n    /// List of address table lookups used to load additional accounts\n    /// for this transaction.\n    #[serde(with = "short_vec")]\n    pub address_table_lookups: Vec<MessageAddressTableLookup>,\n}\n\n/// Address table lookups describe an on-chain address lookup table to use\n/// for loading more readonly and writable accounts in a single tx.\n#[derive(Serialize, Deserialize)]\npub struct MessageAddressTableLookup {\n    /// Address lookup table account key\n    pub account_key: Pubkey,\n    /// List of indexes used to load writable account addresses\n    #[serde(with = "short_vec")]\n    pub writable_indexes: Vec<u8>,\n    /// List of indexes used to load readonly account addresses\n    #[serde(with = "short_vec")]\n    pub readonly_indexes: Vec<u8>,\n}\n')),(0,o.kt)("p",null,'\u65b0\u7684 VersionedTransaction \u9700\u8981\u7528 VersionedMessage \u6765\u6784\u9020\uff0c\u800c VersionedMessage \u4f7f\u7528\u7684\u662f v0::Message \u5176\u4e2d\u5305\u542b\u4e86"address_table_lookups"\u4ed6\u662f"MessageAddressTableLookup" \u6570\u7ec4\uff0c\u6bcf\u4e2a Table \u5305\u542b\u4e86 Table \u5b58\u50a8\u7684\u5185\u5bb9 Account\uff0c\u4ee5\u53ca\u5176\u5b9e\u8bfb\u548c\u5199\u7684 Index\u3002'),(0,o.kt)("p",null,"\u8fd9\u6837\u6700\u7ec8\u5728\u5e8f\u5217\u5316\u7684\u4ea4\u6613\u4e2d\uff0c\u53ea\u9700\u8981 Table \u4e2d\u7684 index \u548c Table \u7684\u5730\u5740\uff0c\u65e2\u53ef\u4ee5\u5b9e\u73b0\u5bf9 256 \u4e2a Account \u7684 \u8ffd\u8e2a\u3002"),(0,o.kt)("h2",{id:"alt-\u4f7f\u7528"},"ALT \u4f7f\u7528"),(0,o.kt)("p",null,"\u8981\u53d1\u8d77 ALT \u4ea4\u6613\uff0c\u9996\u5148\u8981\u901a\u8fc7 createLookupTable \u521b\u5efa ALT \u7684 Table \u8d26\u6237\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const web3 = require("@solana/web3.js");\n\n// connect to a cluster and get the current `slot`\nconst connection = new web3.Connection(web3.clusterApiUrl("devnet"));\nconst slot = await connection.getSlot();\n\n// Assumption:\n// `payer` is a valid `Keypair` with enough SOL to pay for the execution\n\nconst [lookupTableInst, lookupTableAddress] =\n    web3.AddressLookupTableProgram.createLookupTable({\n        authority: payer.publicKey,\n        payer: payer.publicKey,\n        recentSlot: slot,\n    });\n\nconsole.log("lookup table address:", lookupTableAddress.toBase58());\n\n// To create the Address Lookup Table on chain:\n// send the `lookupTableInst` instruction in a transaction\n')),(0,o.kt)("p",null,"\u7136\u540e\u5c06\u8981\u7528\u5230\u7684 Account \u7684\u5730\u5740\uff0c\u5b58\u5165\u8fd9\u4e2a\u8d26\u53f7\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// add addresses to the `lookupTableAddress` table via an `extend` instruction\nconst extendInstruction = web3.AddressLookupTableProgram.extendLookupTable({\n    payer: payer.publicKey,\n    authority: payer.publicKey,\n    lookupTable: lookupTableAddress,\n    addresses: [\n        payer.publicKey,\n        web3.SystemProgram.programId,\n        // list more `publicKey` addresses here\n    ],\n});\n\n// Send this `extendInstruction` in a transaction to the cluster\n// to insert the listing of `addresses` into your lookup table with address `lookupTableAddress`\n")),(0,o.kt)("p",null,"\u7136\u540e\u53d1\u8d77\u4ea4\u6613\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// Assumptions:\n// - `arrayOfInstructions` has been created as an `array` of `TransactionInstruction`\n// - we are using the `lookupTableAccount` obtained above\n\n// construct a v0 compatible transaction `Message`\nconst messageV0 = new web3.TransactionMessage({\n    payerKey: payer.publicKey,\n    recentBlockhash: blockhash,\n    instructions: arrayOfInstructions, // note this is an array of instructions\n}).compileToV0Message([lookupTableAccount]);\n\n// create a v0 transaction from the v0 message\nconst transactionV0 = new web3.VersionedTransaction(messageV0);\n\n// sign the v0 transaction using the file system wallet we created named `payer`\ntransactionV0.sign([payer]);\n\n// send and confirm the transaction\n// (NOTE: There is NOT an array of Signers here; see the note below...)\nconst txid = await web3.sendAndConfirmTransaction(connection, transactionV0);\n\nconsole.log(\n    `Transaction: https://explorer.solana.com/tx/${txidV0}?cluster=devnet`\n);\n")),(0,o.kt)("h2",{id:"\u5b9e\u4f8b"},"\u5b9e\u4f8b"),(0,o.kt)("p",null,"\u4ee5 ALT \u7684\u65b9\u5f0f\uff0c\u6765\u7ec4\u5408\u5b9e\u73b0 Mint Token \u7684\u521b\u5efa"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const slot = await connection.getSlot();\nconst [lookupTableIx, lookupTableAddress] =\n    await AddressLookupTableProgram.createLookupTable({\n        authority: publicKey,\n        payer: publicKey,\n        recentSlot: slot,\n    });\n\nconst extendIx = await AddressLookupTableProgram.extendLookupTable({\n    payer: publicKey,\n    authority: publicKey,\n    lookupTable: lookupTableAddress,\n    addresses: [\n        publicKey,\n        SystemProgram.programId,\n        mintKeypair.publicKey,\n        TOKEN_PROGRAM_ID,\n    ],\n});\n\nconst txInstructions = [\n    lookupTableIx,\n    extendIx,\n    SystemProgram.createAccount({\n        fromPubkey: publicKey,\n        newAccountPubkey: mintKeypair.publicKey,\n        space: MINT_SIZE,\n        lamports: lamports,\n        programId: TOKEN_PROGRAM_ID,\n    }),\n    createInitializeMint2Instruction(\n        mintKeypair.publicKey,\n        9,\n        publicKey,\n        publicKey,\n        TOKEN_PROGRAM_ID\n    ),\n];\n\nconsole.log("txi : ", txInstructions);\nconst {\n    context: { slot: minContextSlot },\n    value: { blockhash, lastValidBlockHeight },\n} = await connection.getLatestBlockhashAndContext();\n//let latestBlockhash = await connection.getLatestBlockhash("finalized");\nenqueueSnackbar(\n    `   \u2705 - Fetched latest blockhash. Last Valid Height:\n      ${lastValidBlockHeight}`\n);\nconsole.log("slot:", minContextSlot);\nconsole.log("latestBlockhash:", blockhash);\n\nconst messageV0 = new TransactionMessage({\n    payerKey: publicKey,\n    recentBlockhash: blockhash,\n    instructions: txInstructions,\n}).compileToV0Message();\n\nconst trx = new VersionedTransaction(messageV0);\nconst signature = await sendTransaction(trx, connection, {\n    minContextSlot,\n    signers: [mintKeypair],\n});\nconsole.log("signature:", signature);\n')),(0,o.kt)("p",null,"\u8fd0\u884c\u540e\uff0c\u6211\u4eec\u521b\u5efa Token\uff0c\u5e76\u5f97\u5230\u4ea4\u6613\u8bb0\u5f55"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://explorer.solana.com/tx/4DFETLv7bExTESy4cGtJ1A7Vd4G8WK2f48hCAhB33i2bc9Kuofbw9y5KeLqBW4gbFHFMA4RnUgDuzAkcsbrszQRp?cluster=devnet"},"https://explorer.solana.com/tx/4DFETLv7bExTESy4cGtJ1A7Vd4G8WK2f48hCAhB33i2bc9Kuofbw9y5KeLqBW4gbFHFMA4RnUgDuzAkcsbrszQRp?cluster=devnet")),(0,o.kt)(l.Z,{minHeight:240,mdxType:"BrowserWindow"},(0,o.kt)(r.Z,{alt:"Docusaurus themed image",sources:{light:(0,s.Z)("/img/solana/alt_tx.png"),dark:(0,s.Z)("/img/solana/alt_tx.png")},mdxType:"ThemedImage"})),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/iRoySwift/solana-tutorial/tree/main/solana-contract-development-advanced/solana-contract-alts/ts"},"\u53c2\u8003\u4ee3\u7801")))}m.isMDXComponent=!0}}]);