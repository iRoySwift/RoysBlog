"use strict";(self.webpackChunkroys_blog=self.webpackChunkroys_blog||[]).push([[5070],{3741:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>d,toc:()=>p});var o=t(1527),a=t(7279),s=t(8722),i=t(2674),r=t(2379);const c={id:"solana-contract-execise",title:"4\u3001\u8bfe\u540e\u7ec3\u4e60"},l=void 0,d={id:"solana/solana-bootcamp/3\u3001\u4e0eSolana\u5408\u7ea6\u4ea4\u4e92/solana-contract-execise",title:"4\u3001\u8bfe\u540e\u7ec3\u4e60",description:"\u8bfe\u540e\u7ec3\u4e60",source:"@site/docs/solana/solana-bootcamp/3\u3001\u4e0eSolana\u5408\u7ea6\u4ea4\u4e92/4\u3001\u8bfe\u540e\u7ec3\u4e60.md",sourceDirName:"solana/solana-bootcamp/3\u3001\u4e0eSolana\u5408\u7ea6\u4ea4\u4e92",slug:"/solana/solana-bootcamp/3\u3001\u4e0eSolana\u5408\u7ea6\u4ea4\u4e92/solana-contract-execise",permalink:"/docs/solana/solana-bootcamp/3\u3001\u4e0eSolana\u5408\u7ea6\u4ea4\u4e92/solana-contract-execise",draft:!1,unlisted:!1,editUrl:"https://github.com/iRoySwift/RoysBlog/tree/master/docs/solana/solana-bootcamp/3\u3001\u4e0eSolana\u5408\u7ea6\u4ea4\u4e92/4\u3001\u8bfe\u540e\u7ec3\u4e60.md",tags:[],version:"current",frontMatter:{id:"solana-contract-execise",title:"4\u3001\u8bfe\u540e\u7ec3\u4e60"},sidebar:"docs",previous:{title:"3\u3001\u5408\u7ea6\u8c03\u7528",permalink:"/docs/solana/solana-bootcamp/3\u3001\u4e0eSolana\u5408\u7ea6\u4ea4\u4e92/solana-contract-call"},next:{title:"4\u3001Rust\u57fa\u672c\u77e5\u8bc6",permalink:"/docs/category/4rust\u57fa\u672c\u77e5\u8bc6"}},u={},p=[{value:"1\u3001Demo",id:"1demo",level:2},{value:"2\u3001 \u4e0d\u4f7f\u7528\u94b1\u5305\u521b\u5efa Token",id:"2-\u4e0d\u4f7f\u7528\u94b1\u5305\u521b\u5efa-token",level:2},{value:"\u521b\u5efa token \u4e0e\u94f8\u5e01",id:"\u521b\u5efa-token-\u4e0e\u94f8\u5e01",level:3},{value:"\u67e5\u8be2\u62e5\u6709\u94f8\u5e01\u6743\u9650\u7684 token",id:"\u67e5\u8be2\u62e5\u6709\u94f8\u5e01\u6743\u9650\u7684-token",level:3},{value:"3.\u901a\u8fc7\u94b1\u5305\u521b\u5efa token",id:"3\u901a\u8fc7\u94b1\u5305\u521b\u5efa-token",level:2},{value:"\u521b\u5efa token",id:"\u521b\u5efa-token",level:3},{value:"4.\u53d1\u9001 Token",id:"4\u53d1\u9001-token",level:2},{value:"\u521b\u5efa\u6307\u4ee4",id:"\u521b\u5efa\u6307\u4ee4",level:3},{value:"\u521b\u5efa\u5e76\u53d1\u9001\u7248\u672c\u5316\u4ea4\u6613",id:"\u521b\u5efa\u5e76\u53d1\u9001\u7248\u672c\u5316\u4ea4\u6613",level:3},{value:"5\u3001\u901a\u8fc7\u94b1\u5305\u53d1\u9001 Token",id:"5\u901a\u8fc7\u94b1\u5305\u53d1\u9001-token",level:2}];function m(n){const e={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.p,{children:"\u8bfe\u540e\u7ec3\u4e60\n\u5b9e\u73b0\u4e00\u4e2a DApp \u9875\u9762\uff0c\u5b9e\u73b0\u4ee3\u5e01\u521b\u5efa\uff0c\u5e76\u6309\u767d\u540d\u5355\u53d1\u9001\u7a7a\u6295"}),"\n",(0,o.jsx)(e.p,{children:"\u63d0\u793a\uff1a"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"\u901a\u8fc7\u4e0e Token \u5408\u7ea6\u4ea4\u4e92\uff0c\u521b\u5efa\u4ee3\u5e01"}),"\n",(0,o.jsx)(e.li,{children:"\u901a\u8fc7\u4e0e Token \u5408\u7ea6\u4ea4\u4e92\uff0c\u7ed9\u767d\u540d\u5355\u4e2d\u7684\u5730\u5740\uff0c\u53d1\u9001 SPL Token \u4ee3\u5e01"}),"\n",(0,o.jsx)(e.li,{children:"\u5efa\u8bae\u4f7f\u7528 SPL-Token \u63d0\u4f9b\u7684\u5e93\u6765\u6784\u5efa instruction"}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"1demo",children:"1\u3001Demo"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.a,{href:"http://tool.iroyswift.com/#/tutorial/baseTokenAirdrop",children:"\u7f51\u5740\u6f14\u793a"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"\u9875\u9762\u622a\u56fe"}),"\n"]}),"\n",(0,o.jsx)(r.Z,{minHeight:240,children:(0,o.jsx)(i.Z,{alt:"Docusaurus themed image",sources:{light:(0,s.Z)("/img/solana/mint_token_transfer.png"),dark:(0,s.Z)("/img/solana/mint_token_transfer.png")}})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.a,{href:"http://tool.iroyswift.com/#/tutorial/mintToken",children:"\u7f51\u5740\u6f14\u793a"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"\u9875\u9762\u622a\u56fe"}),"\n"]}),"\n",(0,o.jsx)(r.Z,{minHeight:240,children:(0,o.jsx)(i.Z,{alt:"Docusaurus themed image",sources:{light:(0,s.Z)("/img/solana/mint_token_transfer_2.png"),dark:(0,s.Z)("/img/solana/mint_token_transfer_2.png")}})}),"\n",(0,o.jsx)(e.h2,{id:"2-\u4e0d\u4f7f\u7528\u94b1\u5305\u521b\u5efa-token",children:"2\u3001 \u4e0d\u4f7f\u7528\u94b1\u5305\u521b\u5efa Token"}),"\n",(0,o.jsxs)(e.p,{children:["Create Token PublicKey: ",(0,o.jsx)(e.a,{href:"https://explorer.solana.com/address/7yeP7VUDJ16zJH7DYwmeAAisHB3DHHPAUuHQzCEKZzhj?cluster=devnet",children:"7yeP7VUDJ16zJH7DYwmeAAisHB3DHHPAUuHQzCEKZzhj"})]}),"\n",(0,o.jsxs)(e.p,{children:["Mint Token Transaction: ",(0,o.jsx)(e.a,{href:"https://explorer.solana.com/tx/5Zpq9tR3X2JE6NwrP9pJ3HEKHWt6eykfT8JJoQusovzfzxPp2fZ6YJCBnNUdvGGieCVhRPJAc885w9cYePQbxM62?cluster=devnet",children:"5Zpq9tR3X2JE6NwrP9pJ3HEKHWt6eykfT8JJoQusovzfzxPp2fZ6YJCBnNUdvGGieCVhRPJAc885w9cYePQbxM62"})]}),"\n",(0,o.jsx)(e.h3,{id:"\u521b\u5efa-token-\u4e0e\u94f8\u5e01",children:"\u521b\u5efa token \u4e0e\u94f8\u5e01"}),"\n",(0,o.jsxs)(e.admonition,{type:"tip",children:[(0,o.jsx)(e.p,{children:"createMint \u4e0e createAssociatedTokenAccount \u540c\u65f6\u4f7f\u7528\u65f6\u6ce8\u610f\uff1a"}),(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Connection \u8981\u7528 ",(0,o.jsx)(e.strong,{children:"confirmed"})," ,"]}),"\n",(0,o.jsx)(e.li,{children:"\u4e0d\u7136\u4f1a\u5bfc\u81f4\u8c03\u7528createAssociatedTokenAccount\u62a5\u9519\uff0c"}),"\n",(0,o.jsx)(e.li,{children:"\u56e0\u4e3acreateMint\u8fd8\u6ca1\u6709\u786e\u8ba4\u65e0\u6cd5\u521b\u5efaATA\u8d26\u53f7"}),"\n"]}),(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'// Step 1 \u8fde\u63a5\u5230Solana\u7f51\u7edc devnet\nconst devnet = clusterApiUrl("devnet");\nconst connection = new Connection(devnet, "confirmed");\n'})})]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",metastring:'title="solana_tools/client/src/pages/Tutorial/BaseTokenAirdrop/MintToken.tsx"',children:'// \u521b\u5efaToken\u548cATA\nconst createToken = async () => {\n    setLoading(true);\n    // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684 mint \uff08\u94f8\u5e01\uff09\n    const mint: PublicKey = await createMint(\n        connection,\n        signer,\n        signer.publicKey,\n        signer.publicKey,\n        9\n    );\n    console.log(`   \u2705 - Token mint address: ${mint.toBase58()}`);\n\n    // \u521b\u5efaAYTA\u8d26\u53f7\n    const ata = await createAssociatedTokenAccount(\n        connection,\n        signer,\n        mint,\n        signer.publicKey\n    );\n    console.log(`   \u2705 - Token ATA address: ${ata.toBase58()}`);\n\n    setLoading(false);\n\n    enqueueSnackbar("\ud83c\udf89 Mint Token succesfully!", {\n        variant: "success",\n    });\n};\n\n// Mint Token\nconst handleMintToken = async (\n    mint: PublicKey,\n    ata: PublicKey,\n    mintNumber: number\n) => {\n    setLoading(true);\n\n    const Signature = await mintTo(\n        connection,\n        signer,\n        mint,\n        ata,\n        signer,\n        mintNumber * LAMPORTS_PER_SOL\n    );\n\n    setLoading(false);\n\n    console.log(\n        `   \u2705 - Mint ${mintNumber} Token To ${ata.toBase58()} transaction:${Signature}`\n    );\n    enqueueSnackbar(`\ud83c\udf89 Mint ${mintNumber} Token succesfully!`, {\n        variant: "success",\n    });\n};\n'})}),"\n",(0,o.jsx)(e.h3,{id:"\u67e5\u8be2\u62e5\u6709\u94f8\u5e01\u6743\u9650\u7684-token",children:"\u67e5\u8be2\u62e5\u6709\u94f8\u5e01\u6743\u9650\u7684 token"}),"\n",(0,o.jsxs)(e.admonition,{type:"tip",children:[(0,o.jsx)(e.p,{children:"\u67e5\u8be2\u540e\u7684\u5217\u8868\u8981\u7b5b\u9009\u51fa\u62e5\u6709\u94f8\u5e01\u6743\u7684 token"}),(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"// \u7b5b\u9009\u62e5\u6709\u94f8\u5e01\u6743\u9650\u7684token\nconst mintInfo = await getMint(connection, accountInfo.mint);\n"})})]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"// \u67e5\u8be2Token\u5217\u8868\nconst queryTokenList = async () => {\n    setLoading(true);\n    let arr: itokenItem[] = [];\n    setTokenList([]);\n    const result: any = await connection.getTokenAccountsByOwner(\n        signer.publicKey,\n        {\n            programId: TOKEN_PROGRAM_ID,\n        }\n    );\n    result.value.forEach(async item => {\n        // \u5904\u7406Unit8Array\u6570\u636e\n        const dataUnit8Array = item.account.data;\n        // \u5c06Unit8Array\u8f6c\u6362\u4e3aJSON\n        const accountInfo = AccountLayout.decode(dataUnit8Array);\n\n        // \u7b5b\u9009\u62e5\u6709\u94f8\u5e01\u6743\u9650\u7684token\n        const mintInfo = await getMint(connection, accountInfo.mint);\n        if (\n            mintInfo.mintAuthority?.toBase58() === signer.publicKey.toBase58()\n        ) {\n            arr.push(\n                createData(\n                    accountInfo.mint,\n                    item.pubkey,\n                    Number(accountInfo.amount / BigInt(LAMPORTS_PER_SOL)),\n                    1\n                )\n            );\n        }\n    });\n    setTimeout(() => {\n        setTokenList(arr);\n        setLoading(false);\n    }, 10000);\n};\n"})}),"\n",(0,o.jsx)(e.h2,{id:"3\u901a\u8fc7\u94b1\u5305\u521b\u5efa-token",children:"3.\u901a\u8fc7\u94b1\u5305\u521b\u5efa token"}),"\n",(0,o.jsx)(e.h3,{id:"\u521b\u5efa-token",children:"\u521b\u5efa token"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",metastring:'title="solana_tools/client/src/utils/solana/mintToken.ts"',children:'/**\n * \u521b\u5efaToken\n * @param connection       Connection to use from useWallet\n * @param pubkey           Payer of the transaction and initialization fees\n * @param sendTransaction  from useWallet\n * @param keypair          Optional keypair, defaulting to a new random one\n * @returns\n */\nconst createToken = async (\n    connection: Connection,\n    pubkey: PublicKey,\n    sendTransaction: WalletAdapterProps["sendTransaction"]\n): Promise<PublicKey> => {\n    const mintKeypair = Keypair.generate();\n\n    // * Step 1 - create an array with your desires `instructions`\n\n    const lamports = await getMinimumBalanceForRentExemptMint(connection);\n    const instructions = [\n        SystemProgram.createAccount({\n            fromPubkey: pubkey,\n            newAccountPubkey: mintKeypair.publicKey,\n            space: MINT_SIZE,\n            lamports,\n            programId: TOKEN_PROGRAM_ID,\n        }),\n        createInitializeMint2Instruction(\n            mintKeypair.publicKey,\n            9,\n            pubkey,\n            pubkey\n        ),\n    ];\n    console.log(\n        "   \u2705 - Step 1 - create an array with your desires `instructions`"\n    );\n\n    // * Step 2 - Generate a transaction and send it to the network\n    const txid = await createAndSendV0TxByWallet(\n        pubkey,\n        connection,\n        sendTransaction,\n        instructions,\n        [mintKeypair]\n    );\n    console.log(\n        "   \u2705 - Step 2 - Generate a transaction and send it to the network"\n    );\n\n    enqueueSnackbar("\ud83c\udf89 Transaction succesfully confirmed!");\n    enqueueSnackbar(`https://explorer.solana.com/tx/${txid}?cluster=devnet`);\n    return mintKeypair.publicKey;\n};\n'})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",metastring:'title="solana_tools/client/src/pages/Tutorial/BaseTokenAirdrop/MintToken.tsx"',children:'import { createToken, mintToken } from "@/utils/solana";\n\n// \u521b\u5efaToken\u548cATA\nconst onCreateToken = async () => {\n    if (!pubkey) {\n        AlertTip();\n        return;\n    }\n    setLoading(true);\n    // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684 mint \uff08\u94f8\u5e01\uff09\n    const mint: PublicKey = await createToken(\n        connection,\n        pubkey,\n        sendTransaction\n    );\n    setMint(mint);\n    console.log(`   \u2705 - Token mint address: ${mint.toBase58()}`);\n\n    setLoading(false);\n    enqueueSnackbar("\ud83c\udf89 Mint Token succesfully!", {\n        variant: "success",\n    });\n};\n'})}),"\n",(0,o.jsx)(e.h2,{id:"4\u53d1\u9001-token",children:"4.\u53d1\u9001 Token"}),"\n",(0,o.jsx)(e.h3,{id:"\u521b\u5efa\u6307\u4ee4",children:"\u521b\u5efa\u6307\u4ee4"}),"\n",(0,o.jsx)(e.p,{children:"\u7ed9\u94b1\u5305\u5730\u5740\uff1aGir7LUMrsXHv5gGctKNp6th2Pj7j9qmYR1LSrsHS6Yaj \u53d1\u9001 1 \u4e2a token\uff1a7yeP7VUDJ16zJH7DYwmeAAisHB3DHHPAUuHQzCEKZzhj"}),"\n",(0,o.jsxs)(e.p,{children:["Transfer \u7ed3\u679c\uff1a",(0,o.jsx)(e.a,{href:"https://explorer.solana.com/tx/4BYEaSzTTtFgHwysiiNDnX3UePZLDNeoNYVB3i7nA3PzcoFhy1e3bz1CrRTxwjpVoc12piT1bmf45jkSEJddkHaN?cluster=devnet",children:"4BYEaSzTTtFgHwysiiNDnX3UePZLDNeoNYVB3i7nA3PzcoFhy1e3bz1CrRTxwjpVoc12piT1bmf45jkSEJddkHaN"})]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'// * Step 2 - create an array with your desires `instructions`\nconst txInstructions = [\n    createTransferInstruction(\n        ataPubkey.address,\n        toAtaPubkey.address,\n        signer.publicKey,\n        1 * LAMPORTS_PER_SOL\n    ),\n];\nconsole.log(\n    "   \u2705 - Step 2 - create an array with your desires `instructions`"\n);\n\n// * Step 3 - Generate a transaction and send it to the network\nconst txid = await createAndSendV0Tx(signer, connection, txInstructions);\nconsole.log(\n    "   \u2705 - Step 3 - Generate a transaction and send it to the network"\n);\n'})}),"\n",(0,o.jsx)(e.h3,{id:"\u521b\u5efa\u5e76\u53d1\u9001\u7248\u672c\u5316\u4ea4\u6613",children:"\u521b\u5efa\u5e76\u53d1\u9001\u7248\u672c\u5316\u4ea4\u6613"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'/**\n * \u521b\u5efa\u5e76\u53d1\u9001\u7248\u672c\u5316\u4ea4\u6613\n * @param signer                 Payer of the transaction and initialization fees\n * @param connection             Connection to use\n * @param txInstructions         Transaction Instruction Array\n * @param lookupTableAccount     Address Lookup Table Account\n * @returns                      Promise Transaction signature as base-58 encoded string\n */\nasync function createAndSendV0Tx(\n    signer: Signer,\n    connection: Connection,\n    txInstructions: TransactionInstruction[],\n    lookupTableAccount?: AddressLookupTableAccount\n): Promise<TransactionSignature> {\n    // * Step 1 - Fetch Latest Blockhash\n    // let latestBlockhash = await connection.getLatestBlockhash("finalized");\n    const {\n        context: { slot: minContextSlot },\n        value: { blockhash, lastValidBlockHeight },\n    } = await connection.getLatestBlockhashAndContext();\n    console.log(\n        "   \u2705 - 1. Fetched latest blockhash. Last valid height:",\n        lastValidBlockHeight\n    );\n\n    // * Step 2 - Generate Transaction Message\n    let messageV0;\n    if (lookupTableAccount) {\n        messageV0 = new TransactionMessage({\n            payerKey: signer.publicKey,\n            recentBlockhash: blockhash,\n            instructions: txInstructions,\n        }).compileToV0Message([lookupTableAccount]);\n    } else {\n        messageV0 = new TransactionMessage({\n            payerKey: signer.publicKey,\n            recentBlockhash: blockhash,\n            instructions: txInstructions,\n        }).compileToV0Message();\n    }\n    console.log("   \u2705 - 2. Compiled transaction message");\n    const transaction = new VersionedTransaction(messageV0);\n\n    // * Step 3 - Sign your transaction with the required `Signers`\n    transaction.sign([signer]);\n    console.log("   \u2705 - 3. Transaction Signed");\n\n    // * Step 4 - Send our v0 transaction to the cluster\n    const txid = await connection.sendTransaction(transaction, {\n        maxRetries: 5,\n        minContextSlot,\n    });\n    console.log("   \u2705 - 4. Transaction sent to network");\n\n    // * Step 5 - Confirm Transaction\n    const confirmation = await connection.confirmTransaction({\n        signature: txid,\n        blockhash: blockhash,\n        lastValidBlockHeight: lastValidBlockHeight,\n    });\n    if (confirmation.value.err) {\n        throw new Error("   \u274c - 5. Transaction not confirmed.");\n    }\n\n    console.log(\n        "   \ud83c\udf89 - 5. Transaction succesfully confirmed!",\n        `https://explorer.solana.com/tx/${txid}?cluster=devnet`\n    );\n    return txid;\n}\n'})}),"\n",(0,o.jsx)(e.h2,{id:"5\u901a\u8fc7\u94b1\u5305\u53d1\u9001-token",children:"5\u3001\u901a\u8fc7\u94b1\u5305\u53d1\u9001 Token"}),"\n",(0,o.jsx)(e.admonition,{type:"tip",children:(0,o.jsx)(e.p,{children:"createTransferInstruction \u4e0e createMintToInstruction \u90fd\u53ef\u4ee5\u53d1\u9001\u4ee3\u5e01"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",metastring:'title="solana_tools/client/src/utils/solana/mintToken.ts"',children:'/**\n * Mint Token\n * @param connection      Connection to use from useWallet\n * @param pubkey          Payer of the transaction and initialization fees\n * @param mint            Mint Address\n * @param toPubkey        Address to mint to\n * @param amount          Amount to mint\n * @param sendTransaction from useWallet\n * @returns\n */\nconst mintToken = async (\n    connection: Connection,\n    pubkey: PublicKey,\n    mint: PublicKey,\n    toPubkey: PublicKey,\n    amount: number,\n    sendTransaction: WalletAdapterProps["sendTransaction"]\n): Promise<PublicKey> => {\n    // * Step 1 - create an array with your desires `instructions`\n    // \u83b7\u53d6ATA\u8d26\u53f7\n    const ataAccount = getAssociatedTokenAddressSync(mint, toPubkey);\n    console.log(\n        "\ud83d\ude80 ~ file: mintToken.ts:94 ~ toPubkey:",\n        toPubkey.toBase58(),\n        ataAccount.toBase58()\n    );\n\n    let instructions: TransactionInstruction[] = [];\n    try {\n        await getAccount(connection, ataAccount);\n    } catch (error) {\n        // \u521b\u5efaAYTA\n        instructions.push(\n            createAssociatedTokenAccountInstruction(\n                pubkey,\n                ataAccount,\n                toPubkey,\n                mint\n            )\n        );\n    }\n    instructions.push(\n        // mint token\n        createMintToInstruction(mint, ataAccount, pubkey, amount)\n    );\n\n    // * Step 2 - Generate a transaction and send it to the network\n    const txid = await createAndSendV0TxByWallet(\n        pubkey,\n        connection,\n        sendTransaction,\n        instructions\n    );\n    console.log(\n        "   \u2705 - Step 2 - Generate a transaction and send it to the network"\n    );\n\n    enqueueSnackbar("\ud83c\udf89 Transaction succesfully confirmed!");\n    enqueueSnackbar(`https://explorer.solana.com/tx/${txid}?cluster=devnet`);\n    return ataAccount;\n};\n'})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'const onMint = async () => {\n    if (!pubkey || !mint || !toPubkey) {\n        enqueueSnackbar(`\u6ca1\u6709\u83b7\u53d6\u5230pubkey\u3001mint\u3001toPubkey\u8d26\u53f7\uff01`, {\n            variant: "warning",\n        });\n        return;\n    }\n    const ata = await mintToken(\n        connection,\n        pubkey,\n        mint,\n        toPubkey,\n        toCount,\n        sendTransaction\n    );\n    setAtaAccount(ata);\n};\n'})})]})}function h(n={}){const{wrapper:e}={...(0,a.a)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(m,{...n})}):m(n)}},2379:(n,e,t)=>{t.d(e,{Z:()=>s});t(959);const o={browserWindow:"browserWindow_my1Q",browserWindowHeader:"browserWindowHeader_jXSR",row:"row_KZDM",buttons:"buttons_uHc7",right:"right_oyze",browserWindowAddressBar:"browserWindowAddressBar_Pd8y",dot:"dot_giz1",browserWindowMenuIcon:"browserWindowMenuIcon_Vhuh",bar:"bar_rrRL",browserWindowBody:"browserWindowBody_Idgs"};var a=t(1527);function s(n){let{children:e,minHeight:t,url:s="http://localhost:3000"}=n;return(0,a.jsxs)("div",{className:o.browserWindow,style:{minHeight:t},children:[(0,a.jsxs)("div",{className:o.browserWindowHeader,children:[(0,a.jsxs)("div",{className:o.buttons,children:[(0,a.jsx)("span",{className:o.dot,style:{background:"#f25f58"}}),(0,a.jsx)("span",{className:o.dot,style:{background:"#fbbe3c"}}),(0,a.jsx)("span",{className:o.dot,style:{background:"#58cb42"}})]}),(0,a.jsx)("div",{className:o.browserWindowAddressBar,children:s}),(0,a.jsx)("div",{className:o.browserWindowMenuIcon,children:(0,a.jsxs)("div",{children:[(0,a.jsx)("span",{className:o.bar}),(0,a.jsx)("span",{className:o.bar}),(0,a.jsx)("span",{className:o.bar})]})})]}),(0,a.jsx)("div",{className:o.browserWindowBody,children:e})]})}},7279:(n,e,t)=>{t.d(e,{Z:()=>r,a:()=>i});var o=t(959);const a={},s=o.createContext(a);function i(n){const e=o.useContext(s);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:i(n.components),o.createElement(s.Provider,{value:e},n.children)}}}]);