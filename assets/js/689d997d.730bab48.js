"use strict";(self.webpackChunkroys_blog=self.webpackChunkroys_blog||[]).push([[4782],{9108:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>c,metadata:()=>u,toc:()=>p});var t=o(1527),a=o(7279),s=o(8722),r=o(2674),i=o(2379);const c={id:"solana-cpi",title:"3\u3001\u5408\u7ea6\u95f4\u8c03\u7528CPI"},l=void 0,u={id:"solana/solana-bootcamp/6\u3001Solana\u5408\u7ea6\u5f00\u53d1Part2/solana-cpi",title:"3\u3001\u5408\u7ea6\u95f4\u8c03\u7528CPI",description:"Solana \u8fd0\u884c\u65f6\u5141\u8bb8\u7a0b\u5e8f\u901a\u8fc7\u79f0\u4e3a\u8de8\u7a0b\u5e8f\u8c03\u7528\u7684\u673a\u5236\u76f8\u4e92\u8c03\u7528\u3002 \u7a0b\u5e8f\u4e4b\u95f4\u7684\u8c03\u7528\u662f\u901a\u8fc7\u4e00\u4e2a\u7a0b\u5e8f\u8c03\u7528\u53e6\u4e00\u4e2a\u7a0b\u5e8f\u7684\u6307\u4ee4\u6765\u5b9e\u73b0\u7684\u3002 \u8c03\u7528\u7a0b\u5e8f\u5c06\u6682\u505c\uff0c\u76f4\u5230\u88ab\u8c03\u7528\u7a0b\u5e8f\u5b8c\u6210\u5bf9\u6307\u4ee4\u7684\u5904\u7406\u3002",source:"@site/docs/solana/solana-bootcamp/6\u3001Solana\u5408\u7ea6\u5f00\u53d1Part2/3\u3001\u5408\u7ea6\u95f4\u8c03\u7528CPI.md",sourceDirName:"solana/solana-bootcamp/6\u3001Solana\u5408\u7ea6\u5f00\u53d1Part2",slug:"/solana/solana-bootcamp/6\u3001Solana\u5408\u7ea6\u5f00\u53d1Part2/solana-cpi",permalink:"/docs/solana/solana-bootcamp/6\u3001Solana\u5408\u7ea6\u5f00\u53d1Part2/solana-cpi",draft:!1,unlisted:!1,editUrl:"https://github.com/iRoySwift/RoysBlog/tree/master/docs/solana/solana-bootcamp/6\u3001Solana\u5408\u7ea6\u5f00\u53d1Part2/3\u3001\u5408\u7ea6\u95f4\u8c03\u7528CPI.md",tags:[],version:"current",frontMatter:{id:"solana-cpi",title:"3\u3001\u5408\u7ea6\u95f4\u8c03\u7528CPI"},sidebar:"docs",previous:{title:"2\u3001PDA\u8d26\u53f7",permalink:"/docs/solana/solana-bootcamp/6\u3001Solana\u5408\u7ea6\u5f00\u53d1Part2/solana-pda"},next:{title:"4\u3001\u7cfb\u7edf\u53d8\u91cf",permalink:"/docs/solana/solana-bootcamp/6\u3001Solana\u5408\u7ea6\u5f00\u53d1Part2/solana-var"}},d={},p=[{value:"invoke \u8def\u7531\u5408\u7ea6",id:"invoke-\u8def\u7531\u5408\u7ea6",level:2},{value:"invoke_signed \u8c03\u7528",id:"invoke_signed-\u8c03\u7528",level:2}];function h(n){const e={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:"Solana \u8fd0\u884c\u65f6\u5141\u8bb8\u7a0b\u5e8f\u901a\u8fc7\u79f0\u4e3a\u8de8\u7a0b\u5e8f\u8c03\u7528\u7684\u673a\u5236\u76f8\u4e92\u8c03\u7528\u3002 \u7a0b\u5e8f\u4e4b\u95f4\u7684\u8c03\u7528\u662f\u901a\u8fc7\u4e00\u4e2a\u7a0b\u5e8f\u8c03\u7528\u53e6\u4e00\u4e2a\u7a0b\u5e8f\u7684\u6307\u4ee4\u6765\u5b9e\u73b0\u7684\u3002 \u8c03\u7528\u7a0b\u5e8f\u5c06\u6682\u505c\uff0c\u76f4\u5230\u88ab\u8c03\u7528\u7a0b\u5e8f\u5b8c\u6210\u5bf9\u6307\u4ee4\u7684\u5904\u7406\u3002"}),"\n",(0,t.jsx)(e.p,{children:"\u8fd8\u662f\u4ee5 ATA \u8d26\u53f7\u6765\u4e3e\u4f8b\u5b50\u3002\u6bd4\u5982\u6211\u4eec\u521b\u5efa\u4e86\u4ee3\u5e01 TokenA\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u8981\u7ed9\u67d0\u4e2a\u4eba\u53d1\u653e\u7a7a\u6295\u3002\u90a3\u4e48\u6839\u636e\u6211\u4eec\u524d\u9762\u7684\u7ecf\u9a8c\u77e5\u9053\uff0c\u5904\u7406\u65b9\u5f0f\u662f\u8fd9\u6837\u7684\uff0c\u9996\u5148\u6211\u4eec\u8981\u4e3a\u8fd9\u4e2a\u7528\u6237\u521b\u5efa\u5176\u5bf9\u5e94\u7684 TokenA \u7684 ATA \u8d26\u53f7\uff0c\u6bd4\u5982\u53eb TokenA_ATA_Account\u3002\u7136\u540e\u518d\u7ed9\u8fd9\u4e2a\u5730\u5740\u505a mint \u64cd\u4f5c\u3002"}),"\n",(0,t.jsx)(e.p,{children:"\u90a3\u4e48\u6211\u4eec\u9996\u5148\u6309\u7167\u524d\u9762\u6587\u7ae0\u7684\u6b65\u9aa4\uff0c\u521b\u5efa\u4e00\u4e2a TokenA_ATA_Account \u5730\u5740\uff0c\u5e76\u5c06\u5176 ower_pubkey \u4e3a\u8be5\u7528\u6237\u7684\u4ea4\u6613\u3002\u7136\u540e\u8fd8\u8981\u518d\u521b\u5efa\u4e00\u4e2a\u7ed9 TokenA_ATA_Account mint TokenA \u4ee3\u5e01\u7684\u4ea4\u6613\u3002"}),"\n",(0,t.jsx)(e.p,{children:"\u8fd9\u91cc\u7684\u4e24\u4e2a\u4ea4\u6613\u6709\u5148\u540e\u987a\u5e8f\u5173\u7cfb\uff0c\u4e14\u7b2c\u4e8c\u4e2a\u4ea4\u6613\u9700\u8981\u7b49\u5f85\u7b2c\u4e00\u4e2a\u4ea4\u6613\u6267\u884c\u5b8c\u6210\uff0c\u540c\u65f6\u4e24\u6b21\u4ea4\u6613\u7684 gas \u8d39\u7528\u4e5f\u4f1a\u66f4\u9ad8\u3002\u90a3\u4e48\u6709\u6ca1\u4ec0\u4e48\u529e\u6cd5\u5c06\u4e24\u6b21\u4ea4\u6613\u8fdb\u884c\u5408\u5e76\u5462\uff1f"}),"\n",(0,t.jsx)(e.p,{children:"\u7b54\u6848\u5c31\u662f\u7528\u4e00\u4e2a\u5408\u7ea6\u6765\u5b9e\u73b0\u8fd9\u4e24\u4e2a\u6b65\u9aa4\uff0c\u7136\u540e\u53d1\u9001\u4e00\u4e2a\u4ea4\u6613\u5373\u53ef\u3002\u5728\u8fd9\u4e2a\u5408\u7ea6\u91cc\u9762\uff0c\u5b9e\u73b0\u5bf9\u8d26\u53f7\u7684\u521b\u5efa\uff0c\u4ee5\u53ca\u5bf9 SPL-Token \u7684 mint \u4e24\u4e2a\u52a8\u4f5c\u3002\u8fd9\u4e2a\u5408\u7ea6\u9700\u8981\u8ddf ATA \u5408\u7ea6\u4ea4\u4e92\uff0c\u8c03\u7528 ATA \u7684\u521b\u5efa\u8d26\u53f7\u6307\u4ee4\uff0c\u4e4b\u540e\u518d\u548c Token \u5408\u7ea6\u4ea4\u4e92\uff0c\u6267\u884c\u5176 mint \u7684\u6307\u4ee4\u3002"}),"\n",(0,t.jsx)(e.p,{children:"\u5408\u7ea6\u4e4b\u95f4\u8c03\u7528\u5206\u6210\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u4e0d\u9700\u8981\u6821\u9a8c\u7b7e\u540d\u7684 invoke,\u53e6\u4e00\u7c7b\u662f\u76ee\u6807\u5408\u7ea6\u9700\u8981\u6821\u9a8c\u64cd\u4f5c\u6743\u9650\u7684 invoke_signed \u65b9\u6cd5\uff0c\u524d\u8005\u7c7b\u4f3c router \u8def\u7531\u5230\u53e6\u5916\u4e00\u4e2a\u5408\u7ea6\u6267\u884c\uff0c\u540e\u8005\u5219\u76ee\u6807\u7a0b\u5e8f\u5bf9\u76f8\u5173\u7684\u8d26\u53f7\u6709\u64cd\u4f5c\u6743\u9650\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u524d\u9762\u8bf4\u7684 PDA \u8d26\u53f7\u3002"}),"\n",(0,t.jsx)(e.h2,{id:"invoke-\u8def\u7531\u5408\u7ea6",children:"invoke \u8def\u7531\u5408\u7ea6"}),"\n",(0,t.jsx)(e.p,{children:'\u5982\u679c\u76ee\u6807\u5408\u7ea6\u5bf9\u8f93\u5165\u7684\u6240\u6709 Account \u65e0\u9700\u505a\u7b7e\u540d\u6821\u9a8c\uff0c\u8fd9\u79cd\u573a\u666f\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 invoke \u6765\u76f4\u63a5\u8c03\u7528\u76ee\u6807\u5408\u7ea6\u3002\u6bd4\u5982\u6211\u4eec\u5728\u6700\u524d\u9762\u7684"hello wolrd"\u7a0b\u5e8f\u4e2d\uff0c\u53ea\u662f\u6253\u5370\u4e86\u4e00\u6bb5\u65e5\u5fd7\uff0c\u5e76\u6ca1\u6709\u9700\u8981\u5bf9\u8f93\u5165\u7684 Account \u7b7e\u540d\u3002'}),"\n",(0,t.jsx)(e.p,{children:"\u8fd9\u91cc\u6211\u4eec\u518d\u5b9e\u73b0\u4e00\u4e2a invoke \u5408\u7ea6\uff1a"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-rs",children:'use solana_program::{\n    account_info::{next_account_info, AccountInfo},\n    entrypoint,\n    entrypoint::ProgramResult,\n    instruction::{AccountMeta, Instruction},\n    msg,\n    program::invoke,\n    pubkey::Pubkey,\n};\n\n// Declare and export the program\'s entrypoint\nentrypoint!(process_instruction);\n\n// Program entrypoint\'s implementation\npub fn process_instruction(\n    _program_id: &Pubkey, // Public key of the account the hello world program was loaded into\n    accounts: &[AccountInfo], // The account to say hello to\n    _instruction_data: &[u8], // Ignored, all helloworld instructions are hellos\n) -> ProgramResult {\n    // Iterating accounts is safer than indexing\n    let accounts_iter = &mut accounts.iter();\n\n    // Get the account to say hello to\n    let account = next_account_info(accounts_iter)?;\n    let helloworld_program_id = next_account_info(accounts_iter)?;\n\n    msg!("invoke helloworld program entrypoint from {}", account.key);\n\n    let instruction = Instruction::new_with_bytes(\n        *helloworld_program_id.key,\n        "hello".as_bytes(),\n        vec![AccountMeta::new(*account.key, true)],\n    );\n\n    let account_infos = [account.clone()];\n    invoke(&instruction, &account_infos[..])\n}\n\n'})}),"\n",(0,t.jsx)(e.p,{children:"\u8fd9\u91cc\uff0c\u4ece\u8f93\u5165\u4e2d\u5f97\u5230\u4e24\u4e2a Account\uff0c\u7b2c\u4e00\u4e2a\u662f\u8c03\u7528\u7b2c\u4e8c\u4e2a\u7684\u53c2\u6570\uff0c\u7b2c\u4e8c\u4e2a\u662f helloworld \u7684\u5408\u7ea6\u7684\u5730\u5740\u3002"}),"\n",(0,t.jsx)(e.p,{children:"\u7136\u540e\u6784\u9020\u4e00\u4e2a instruction::Instruction\u3002\u6700\u540e\u518d\u8c03\u7528\u4e0a\u9762\u8bf4\u7684 invoke\uff0c\u8fd9\u91cc\u6307\u4ee4\u4e2d\u7684\u6570\u7ec4\u548c invoke \u91cc\u9762\u7684\u6570\u7ec4\u662f\u4e0d\u4e00\u6837\u7684\u3002\u6307\u4ee4\u4e2d\u662f\uff1a"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-rs",children:"#[repr(C)]\n#[derive(Debug, Default, PartialEq, Eq, Clone, Serialize, Deserialize)]\npub struct AccountMeta {\n    /// An account's public key.\n    pub pubkey: Pubkey,\n    /// True if an `Instruction` requires a `Transaction` signature matching `pubkey`.\n    pub is_signer: bool,\n    /// True if the account data or metadata may be mutated during program execution.\n    pub is_writable: bool,\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u800c invoke \u91cc\u9762\u662f\u7cfb\u7edf\u7684 Account\uff1a"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-rs",children:"/// Account information\n#[derive(Clone)]\n#[repr(C)]\npub struct AccountInfo<'a> {\n    /// Public key of the account\n    pub key: &'a Pubkey,\n    /// The lamports in the account.  Modifiable by programs.\n    pub lamports: Rc<RefCell<&'a mut u64>>,\n    /// The data held in this account.  Modifiable by programs.\n    pub data: Rc<RefCell<&'a mut [u8]>>,\n    /// Program that owns this account\n    pub owner: &'a Pubkey,\n    /// The epoch at which this account will next owe rent\n    pub rent_epoch: Epoch,\n    /// Was the transaction signed by this account's public key?\n    pub is_signer: bool,\n    /// Is the account writable?\n    pub is_writable: bool,\n    /// This account's data contains a loaded program (and is now read-only)\n    pub executable: bool,\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u7136\u540e\u6211\u4eec\uff0c\u7ee7\u7eed\u5b9e\u73b0\u4e00\u4e2a\u5ba2\u6237\u7aef\u7684\u8c03\u7528\uff1a"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-rs",children:'use std::str::FromStr;\n\nuse solana_program::{\n    instruction::{AccountMeta, Instruction},\n    pubkey::Pubkey,\n};\nuse solana_rpc_client::rpc_client::RpcClient;\nuse solana_sdk::{signature::Keypair, signer::Signer, transaction::Transaction};\n\nconst HELLOWORLD_PROGRAM_ID: &str = "9eMNGtayMEuNkzfdUYSw8k9msaPhFJG9Bi75wGQDvddR";\nconst INVOKE_PROGRAM_ID: &str = "D4saMj1EGsMCkRVmf46iHSmpTH7GzACvBdZF4WLvbE1r";\nconst DEV_NET: &str = "https://qn-devnet.solana.fm";\nconst PRIVATE_KEY: [u8; 64] = [\n    37, 37, 60, 131, 98, 125, 34, 130, 135, 2, 57, 248, 169, 60, 174, 216, 219, 70, 59, 155, 64, 7,\n    77, 104, 33, 204, 94, 10, 112, 105, 150, 19, 81, 152, 193, 57, 135, 12, 148, 233, 95, 219, 65,\n    201, 180, 32, 3, 250, 82, 142, 28, 180, 128, 106, 126, 102, 144, 196, 181, 26, 146, 135, 251,\n    94,\n];\n\npub fn invoke_program() {\n    // Step 1 \u8fde\u63a5\u5230Solana\u7f51\u7edc devnet\n    let client = RpcClient::new(DEV_NET);\n\n    // Step 2 \u521b\u5efa\u8005\u8d26\u53f7\u4fe1\u606f\uff08private key\uff09\n    let hello_program_id = Pubkey::from_str(HELLOWORLD_PROGRAM_ID).unwrap();\n    let invoke_program_id = Pubkey::from_str(INVOKE_PROGRAM_ID).unwrap();\n    let signer = Keypair::from_bytes(&PRIVATE_KEY).unwrap();\n\n    let instraction = Instruction::new_with_bytes(\n        invoke_program_id,\n        "hello".as_bytes(),\n        vec![\n            AccountMeta::new(signer.pubkey(), true),\n            AccountMeta::new_readonly(hello_program_id, false),\n        ],\n    );\n    let ixs = vec![instraction];\n\n    // Latest hash\n    let recent_blockhash = client.get_latest_blockhash().unwrap();\n    let tx = Transaction::new_signed_with_payer(\n        &ixs,\n        Some(&signer.pubkey()),\n        &[&signer],\n        recent_blockhash,\n    );\n\n    // send transaction\n    let sig = client.send_and_confirm_transaction(&tx).unwrap();\n    println!("Use \'solana confirm -v {sig}\' to see the logs");\n}\n\n'})}),"\n",(0,t.jsx)(e.p,{children:"\u548c\u524d\u9762\u7684\u8c03\u7528\u4e00\u6837\uff0c\u4e3b\u8981\u4f20\u9012\u4e86\u4e24\u4e2a AccountMeta\u3002\u6784\u5efa\u6267\u884c\uff1a"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-zsh",children:"cargo run\n   Compiling invoke-helloworld-cli v0.1.0 (/Users/roy/Project/Solana/solana-tutorial/solana-program-part2/invoke-helloworld/cli)\n    Finished dev [unoptimized + debuginfo] target(s) in 3.03s\n     Running `/Users/roy/Project/Solana/solana-tutorial/target/debug/invoke-helloworld-cli`\nUse 'solana confirm -v 519ha2oS2EFKTDBvkHpYz2AMAvqGKmAoV6ZrsYZ4Tiox7uhTBabcYdtD5dagc2RXm62Thecr3iSuhcUqohVAboUR' to see the logs\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u4ea7\u770b\u8fd9\u4e2a\u4ea4\u6613\u7684\u6d4f\u89c8\u5668:"}),"\n",(0,t.jsx)(i.Z,{minHeight:240,children:(0,t.jsx)(r.Z,{alt:"Docusaurus themed image",sources:{light:(0,s.Z)("/img/solana/invoke.png"),dark:(0,s.Z)("/img/solana/invoke.png")}})}),"\n",(0,t.jsx)(e.p,{children:'\u8fd9\u91cc\u53ef\u4ee5\u5f88\u660e\u663e\u7684\u770b\u5230 "inner instruction"\u3002\u4ee5\u53ca\u5bf9\u5e94\u7684\u65e5\u5fd7\u6253\u5370\uff0c\u5148\u6253\u5370\u4e86 invoke \u5408\u7ea6\uff0c\u7136\u540e\u5230 helloworld \u5408\u7ea6\u3002'}),"\n",(0,t.jsx)(e.h2,{id:"invoke_signed-\u8c03\u7528",children:"invoke_signed \u8c03\u7528"}),"\n",(0,t.jsx)(e.p,{children:"invoke_signed \u548c invoke \u7c7b\u4f3c\uff0c\u90fd\u662f\u5728\u5408\u7ea6\u4e2d\u8c03\u7528\u5176\u4ed6\u5408\u7ea6\u7684\u65b9\u6cd5\u3002\u4f46\u662f\u6709\u4e00\u4e2a\u7279\u6b8a\u7684\u529f\u80fd\uff0c\u5c31\u662f\u53ef\u4ee5\u8fdb\u884c\u7b7e\u540d\u6821\u9a8c\u3002\u5177\u4f53\u662f\u4ec0\u4e48\u6837\u7684\u7b7e\u540d\u5462\uff1f"}),"\n",(0,t.jsx)(e.p,{children:"\u5728 PDA \u7684\u5185\u5bb9\u4ecb\u7ecd\u4e2d\uff0c\u6211\u4eec\u6709\u4ecb\u7ecd\u5230\u5408\u7ea6\u5185\u751f\u6210 PDA \u8d26\u53f7\u7684\u65b9\u5f0f\uff0c\u5176\u6709\u4e24\u4e2a\u90e8\u5206\u7ec4\u6210\uff1a"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u4e00\u4e2a\u5730\u5740"}),"\n",(0,t.jsx)(e.li,{children:"\u4e00\u4e2a Seed"}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"\u901a\u8fc7 find_program_address \u53ef\u4ee5\u5f97\u5230 PDA \u5730\u5740\uff0c\u4ee5\u53ca\u4e00\u4e2a Bump \u79cd\u5b50\u3002"}),"\n",(0,t.jsx)(e.p,{children:"\u8fd9\u91cc\u4f20\u5165\u7684\u5730\u5740\uff0c\u5c06\u6709\u6743\u9650\u6821\u9a8c\u8be5 PDA \u5730\u5740\u7684\u7b7e\u540d\uff0c\u5c31\u53ef\u4ee5\u8ba4\u4e3a\u8fd9\u4e2a\u5408\u7ea6\u5730\u5740\uff0c\u76f8\u5f53\u4e8e PDA \u8d26\u53f7\u7684\u79c1\u94a5\u3002"}),"\n",(0,t.jsx)(i.Z,{minHeight:240,children:(0,t.jsx)(r.Z,{alt:"Docusaurus themed image",sources:{light:(0,s.Z)("/img/solana/invoke_signed.png"),dark:(0,s.Z)("/img/solana/invoke_signed.png")}})}),"\n",(0,t.jsx)(e.p,{children:"\u6700\u5e38\u89c1\u7684\u4f7f\u7528\u5c31\u662f\u7ba1\u7406\u8d44\u91d1\u8d26\u53f7\uff0c\u6bd4\u5982\uff1a"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-rs",children:"# use borsh::{BorshSerialize, BorshDeserialize};\n   # use solana_program::{\n   #     pubkey::Pubkey,\n   #     entrypoint::ProgramResult,\n   #     program::invoke_signed,\n   #     system_instruction,\n   #     account_info::{\n   #         AccountInfo,\n   #         next_account_info,\n   #     },\n   # };\n   // The custom instruction processed by our program. It includes the\n   // PDA's bump seed, which is derived by the client program. This\n   // definition is also imported into the off-chain client program.\n   // The computed address of the PDA will be passed to this program via\n   // the `accounts` vector of the `Instruction` type.\n   #[derive(BorshSerialize, BorshDeserialize, Debug)]\n   pub struct InstructionData {\n       pub vault_bump_seed: u8,\n       pub lamports: u64,\n   }\n\n   // The size in bytes of a vault account. The client program needs\n   // this information to calculate the quantity of lamports necessary\n   // to pay for the account's rent.\n   pub static VAULT_ACCOUNT_SIZE: u64 = 1024;\n    /\n   // The entrypoint of the on-chain program, as provided to the\n   // `entrypoint!` macro.\n   fn process_instruction(\n       program_id: &Pubkey,\n       accounts: &[AccountInfo],\n       instruction_data: &[u8],\n   ) -> ProgramResult {\n       let account_info_iter = &mut accounts.iter();\n       let payer = next_account_info(account_info_iter)?;\n       // The vault PDA, derived from the payer's address\n       let vault = next_account_info(account_info_iter)?;\n\n       let mut instruction_data = instruction_data;\n       let instr = InstructionData::deserialize(&mut instruction_data)?;\n       let vault_bump_seed = instr.vault_bump_seed;\n       let lamports = instr.lamports;\n       let vault_size = VAULT_ACCOUNT_SIZE;\n\n       // Invoke the system program to create an account while virtually\n       // signing with the vault PDA, which is owned by this caller program.\n       invoke_signed(\n           &system_instruction::create_account(\n               &payer.key,\n               &vault.key,\n               lamports,\n               vault_size,\n               &program_id,\n           ),\n           &[\n               payer.clone(),\n               vault.clone(),\n           ],\n           // A slice of seed slices, each seed slice being the set\n           // of seeds used to generate one of the PDAs required by the\n           // callee program, the final seed being a single-element slice\n           // containing the `u8` bump seed.\n           &[\n               &[\n                   b\"vault\",\n                   payer.key.as_ref(),\n                   &[vault_bump_seed],\n               ],\n           ]\n       )?;\n\n       Ok(())\n   }\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u8fd9\u4e2a\u7a0b\u5e8f\uff0c\u63a5\u6536\u5ba2\u6237\u7aef\u8f93\u5165\u7684\u4e00\u4e2a seed \u4f5c\u4e3a\u91d1\u5e93\u7684\u94a5\u5319\u3002\u91d1\u5e93\u8d26\u53f7\uff0c\u7531\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u65f6\u5019\u8fdb\u884c\u521b\u5efa PDA \u8d26\u53f7\uff0c\u8fd9\u4e2a\u8d26\u53f7\u7684\u5730\u5740\u53c2\u6570\u7528\u7684\u5c31\u662f\u8fd9\u4e2a\u5408\u7ea6\uff0c\u56e0\u6b64\u8fd9\u4e2a\u5408\u7ea6\u62e5\u6709\u5bf9\u4e8e\u8be5 PDA \u8d26\u53f7\u7684\u7b7e\u540d\u6743\u3002"}),"\n",(0,t.jsx)(e.p,{children:"\u6240\u4ee5\u8fd9\u91cc\u5728\u521b\u5efa\u8d26\u53f7\u7684\u65f6\u5019\uff0csystem_instruction::create_account \u53ef\u4ee5\u9274\u6743\u901a\u8fc7\u3002"}),"\n",(0,t.jsx)(e.p,{children:"\u5728\u6b64\u4e4b\u540e\uff0c\u53ea\u8981\u5ba2\u6237\u7aef\u4f20\u5165\u6b63\u786e\u7684 seed\uff0c\u65e2\u53ef\u4ee5\u51fa\u53d1\u8fd9\u4e2a\u5408\u7ea6\u5bf9\u8be5 PDA \u7a0b\u5e8f\u8fdb\u884c\u76f8\u5e94\u7684\u7b7e\u540d\u52a8\u4f5c\uff0c\u6bd4\u5982\u548c SPL Token \u4ea4\u4e92\uff0c\u505a\u8f6c\u8d26\u52a8\u4f5c\u7b49\u3002"})]})}function m(n={}){const{wrapper:e}={...(0,a.a)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(h,{...n})}):h(n)}},2379:(n,e,o)=>{o.d(e,{Z:()=>s});o(959);const t={browserWindow:"browserWindow_my1Q",browserWindowHeader:"browserWindowHeader_jXSR",row:"row_KZDM",buttons:"buttons_uHc7",right:"right_oyze",browserWindowAddressBar:"browserWindowAddressBar_Pd8y",dot:"dot_giz1",browserWindowMenuIcon:"browserWindowMenuIcon_Vhuh",bar:"bar_rrRL",browserWindowBody:"browserWindowBody_Idgs"};var a=o(1527);function s(n){let{children:e,minHeight:o,url:s="http://localhost:3000"}=n;return(0,a.jsxs)("div",{className:t.browserWindow,style:{minHeight:o},children:[(0,a.jsxs)("div",{className:t.browserWindowHeader,children:[(0,a.jsxs)("div",{className:t.buttons,children:[(0,a.jsx)("span",{className:t.dot,style:{background:"#f25f58"}}),(0,a.jsx)("span",{className:t.dot,style:{background:"#fbbe3c"}}),(0,a.jsx)("span",{className:t.dot,style:{background:"#58cb42"}})]}),(0,a.jsx)("div",{className:t.browserWindowAddressBar,children:s}),(0,a.jsx)("div",{className:t.browserWindowMenuIcon,children:(0,a.jsxs)("div",{children:[(0,a.jsx)("span",{className:t.bar}),(0,a.jsx)("span",{className:t.bar}),(0,a.jsx)("span",{className:t.bar})]})})]}),(0,a.jsx)("div",{className:t.browserWindowBody,children:e})]})}},7279:(n,e,o)=>{o.d(e,{Z:()=>i,a:()=>r});var t=o(959);const a={},s=t.createContext(a);function r(n){const e=t.useContext(s);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:r(n.components),t.createElement(s.Provider,{value:e},n.children)}}}]);