"use strict";(self.webpackChunkroys_blog=self.webpackChunkroys_blog||[]).push([[8747],{3905:(n,e,t)=>{t.d(e,{Zo:()=>u,kt:()=>d});var r=t(7294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function c(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var l=r.createContext({}),i=function(n){var e=r.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):c(c({},e),n)),t},u=function(n){var e=i(n.components);return r.createElement(l.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},g=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,a=n.originalType,l=n.parentName,u=s(n,["components","mdxType","originalType","parentName"]),g=i(t),d=o,m=g["".concat(l,".").concat(d)]||g[d]||p[d]||a;return t?r.createElement(m,c(c({ref:e},u),{},{components:t})):r.createElement(m,c({ref:e},u))}));function d(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var a=t.length,c=new Array(a);c[0]=g;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=n,s.mdxType="string"==typeof n?n:o,c[1]=s;for(var i=2;i<a;i++)c[i]=t[i];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},1007:(n,e,t)=>{t.d(e,{Z:()=>g});var r=t(7294);const o="browserWindow_my1Q",a="browserWindowHeader_jXSR",c="buttons_uHc7",s="browserWindowAddressBar_Pd8y",l="dot_giz1",i="browserWindowMenuIcon_Vhuh",u="bar_rrRL",p="browserWindowBody_Idgs";function g(n){let{children:e,minHeight:t,url:g="http://localhost:3000"}=n;return r.createElement("div",{className:o,style:{minHeight:t}},r.createElement("div",{className:a},r.createElement("div",{className:c},r.createElement("span",{className:l,style:{background:"#f25f58"}}),r.createElement("span",{className:l,style:{background:"#fbbe3c"}}),r.createElement("span",{className:l,style:{background:"#58cb42"}})),r.createElement("div",{className:s},g),r.createElement("div",{className:i},r.createElement("div",null,r.createElement("span",{className:u}),r.createElement("span",{className:u}),r.createElement("span",{className:u})))),r.createElement("div",{className:p},e))}},8533:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>u,toc:()=>g});var r=t(7462),o=(t(7294),t(3905)),a=t(4996),c=t(941),s=t(1007);const l={id:"solana-hello-world",title:"1\u3001Hello World"},i=void 0,u={unversionedId:"solana/solana-bootcamp/5\u3001Solana\u5408\u7ea6\u5f00\u53d1Part1/solana-hello-world",id:"solana/solana-bootcamp/5\u3001Solana\u5408\u7ea6\u5f00\u53d1Part1/solana-hello-world",title:"1\u3001Hello World",description:"Solana \u4e3a\u4e86\u521d\u5b66\u8005\u53ef\u4ee5\u5feb\u901f\u5165\u95e8\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2a Playground \u670d\u52a1\u3002 \u53ef\u4ee5\u5728\u4e0d\u9700\u8981\u672c\u5730\u73af\u5883\u7684\u60c5\u51b5\u4e0b\uff0c\u8fdb\u884c DApp \u7684\u5f00\u53d1\u3002",source:"@site/docs/solana/solana-bootcamp/5\u3001Solana\u5408\u7ea6\u5f00\u53d1Part1/1\u3001Hello World.md",sourceDirName:"solana/solana-bootcamp/5\u3001Solana\u5408\u7ea6\u5f00\u53d1Part1",slug:"/solana/solana-bootcamp/5\u3001Solana\u5408\u7ea6\u5f00\u53d1Part1/solana-hello-world",permalink:"/docs/solana/solana-bootcamp/5\u3001Solana\u5408\u7ea6\u5f00\u53d1Part1/solana-hello-world",draft:!1,editUrl:"https://github.com/iRoySwift/RoysBlog/tree/master/docs/solana/solana-bootcamp/5\u3001Solana\u5408\u7ea6\u5f00\u53d1Part1/1\u3001Hello World.md",tags:[],version:"current",frontMatter:{id:"solana-hello-world",title:"1\u3001Hello World"},sidebar:"docs",previous:{title:"5\u3001Solana\u5408\u7ea6\u5f00\u53d1Part.1",permalink:"/docs/category/5solana\u5408\u7ea6\u5f00\u53d1part1"},next:{title:"2\u3001Solana\u5408\u7ea6\u57fa\u7840\u6982\u5ff5",permalink:"/docs/solana/solana-bootcamp/5\u3001Solana\u5408\u7ea6\u5f00\u53d1Part1/solana-base-concept"}},p={},g=[{value:"1\u3001\u521b\u5efa\u9879\u76ee",id:"1\u521b\u5efa\u9879\u76ee",level:2},{value:"2\u3001\u94fe\u63a5\u94b1\u5305",id:"2\u94fe\u63a5\u94b1\u5305",level:2},{value:"3\u3001\u5f00\u53d1\u5408\u7ea6",id:"3\u5f00\u53d1\u5408\u7ea6",level:2},{value:"HelloWorld \u4ee3\u7801\uff1a",id:"helloworld-\u4ee3\u7801",level:3},{value:"4\u3001\u5ba2\u6237\u7aef\u5f00\u53d1",id:"4\u5ba2\u6237\u7aef\u5f00\u53d1",level:2},{value:"5\u3001\u65e5\u5fd7\u67e5\u770b",id:"5\u65e5\u5fd7\u67e5\u770b",level:2},{value:"\u7f51\u7edc\u8bbe\u7f6e",id:"\u7f51\u7edc\u8bbe\u7f6e",level:3}],d={toc:g};function m(n){let{components:e,...t}=n;return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Solana \u4e3a\u4e86\u521d\u5b66\u8005\u53ef\u4ee5\u5feb\u901f\u5165\u95e8\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2a ",(0,o.kt)("a",{parentName:"p",href:"https://beta.solpg.io/"},"Playground")," \u670d\u52a1\u3002 \u53ef\u4ee5\u5728\u4e0d\u9700\u8981\u672c\u5730\u73af\u5883\u7684\u60c5\u51b5\u4e0b\uff0c\u8fdb\u884c DApp \u7684\u5f00\u53d1\u3002"),(0,o.kt)("h2",{id:"1\u521b\u5efa\u9879\u76ee"},"1\u3001\u521b\u5efa\u9879\u76ee"),(0,o.kt)("p",null,'\u5728\u754c\u9762\u4e2d\uff0c\u6211\u4eec\u70b9\u51fb "Create a New Project"'),(0,o.kt)(s.Z,{minHeight:240,mdxType:"BrowserWindow"},(0,o.kt)(c.Z,{alt:"Docusaurus themed image",sources:{light:(0,a.Z)("/img/solana/playground_create_hellowrld.png"),dark:(0,a.Z)("/img/solana/playground_create_hellowrld.png")},mdxType:"ThemedImage"})),(0,o.kt)("p",null,"\u521b\u5efa\u5b8c\u9879\u76ee\u540e\u3002\u5728 Explorer \u91cc\u53ef\u4ee5\u770b\u5230\u6587\u4ef6\u5217\u8868\uff0c\u4e3b\u8981\u6709\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},"src/\n    lib.rs\n\nclient/\n    clinet.ts\n\ntest/\n    native.test.ts\n")),(0,o.kt)(s.Z,{minHeight:240,mdxType:"BrowserWindow"},(0,o.kt)(c.Z,{alt:"Docusaurus themed image",sources:{light:(0,a.Z)("/img/solana/playground_explorer.png"),dark:(0,a.Z)("/img/solana/playground_explorer.png")},mdxType:"ThemedImage"})),(0,o.kt)("p",null,"\u5bf9\u5e94\u7684\u4f4d\u7f6e\u6709"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'"Build"\uff1a\u6784\u5efa\u5408\u7ea6'),(0,o.kt)("li",{parentName:"ul"},'"Run" : \u8fd0\u884c\u5ba2\u6237\u7aef\u7aef\uff0c\u8c03\u8bd5\u5408\u7ea6\u3002'),(0,o.kt)("li",{parentName:"ul"},'"Test": \u6267\u884c\u6d4b\u8bd5\u4ee3\u7801')),(0,o.kt)("h2",{id:"2\u94fe\u63a5\u94b1\u5305"},"2\u3001\u94fe\u63a5\u94b1\u5305"),(0,o.kt)("p",null,'\u5728\u754c\u9762\u7684\u5de6\u4e0b\u89d2\u6709\u4e2a"unconnect"\u7684\u63d0\u793a\uff0c\u70b9\u51fb\u540e\uff0c\u5f39\u51fa\uff1a'),(0,o.kt)(s.Z,{minHeight:240,mdxType:"BrowserWindow"},(0,o.kt)(c.Z,{alt:"Docusaurus themed image",sources:{light:(0,a.Z)("/img/solana/playground_import_wallet.png"),dark:(0,a.Z)("/img/solana/playground_import_wallet.png")},mdxType:"ThemedImage"})),(0,o.kt)("p",null,'\u5728\u8fd9\u91cc\u9009\u62e9\u6211\u4eec\u4e4b\u524d\u751f\u6210\u7684"~/.config/solana/id.json"\u79d8\u94a5\u6587\u4ef6\u3002\u5bfc\u5165\u540e\uff0c\u53ef\u4ee5\u770b\u5230\u94b1\u5305\u8be6\u60c5'),(0,o.kt)(s.Z,{minHeight:240,mdxType:"BrowserWindow"},(0,o.kt)(c.Z,{alt:"Docusaurus themed image",sources:{light:(0,a.Z)("/img/solana/playground_wallet.png"),dark:(0,a.Z)("/img/solana/playground_wallet.png")},mdxType:"ThemedImage"})),(0,o.kt)("h2",{id:"3\u5f00\u53d1\u5408\u7ea6"},"3\u3001\u5f00\u53d1\u5408\u7ea6"),(0,o.kt)("p",null,"\u6253\u5f00\u8fd9\u91cc\u7684 lib.rs\uff0c\u5728\u91cc\u9762\u8d34\u4e0a\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"use solana_program::{\n    account_info::AccountInfo,\n    entrypoint,\n    entrypoint::ProgramResult,\n    pubkey::Pubkey,\n    msg,\n};\n\n\n// Declare and export the program's entrypoint\nentrypoint!(process_instruction);\n\n// Program entrypoint's implementation\npub fn process_instruction(\n    _program_id: &Pubkey, // Public key of the account the hello world program was loaded into\n    _accounts: &[AccountInfo], // The account to say hello to\n    _instruction_data: &[u8], // Ignored, all helloworld instructions are hellos\n) -> ProgramResult {\n    msg!(\"Hello World Rust program entrypoint\");\n\n    Ok(())\n}\n")),(0,o.kt)("p",null,'\u7136\u540e\u70b9\u51fb"Build",\u5728\u4e0b\u9762\u7684\u754c\u9762\u53ef\u4ee5\u770b\u5230 build \u7684\u7ed3\u679c\uff1a'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},"Building...\nBuild successful. Completed in 0.60s.\n")),(0,o.kt)("p",null,'\u7136\u540e\u70b9\u51fb\u5de6\u4fa7\u7684 \u9524\u5b50+\u6273\u624b\u7684\u56fe\u6807\uff0c\u70b9\u51fb"Deploy":'),(0,o.kt)(s.Z,{minHeight:240,mdxType:"BrowserWindow"},(0,o.kt)(c.Z,{alt:"Docusaurus themed image",sources:{light:(0,a.Z)("/img/solana/playground_build_deplay.png"),dark:(0,a.Z)("/img/solana/playground_build_deplay.png")},mdxType:"ThemedImage"})),(0,o.kt)("p",null,'\u53d1\u5e03\u6210\u529f\uff0c\u53ef\u4ee5\u5728\u754c\u9762\u4e0a\u770b\u5230\u53d1\u5e03\u540e\u7684\u5408\u7ea6\u5730\u5740\u3002\u5728\u53d1\u5e03\u8fc7\u4e00\u6b21\u540e\uff0c\u8fd9\u91cc\u7684"Deploy"\u5c31\u4f1a\u53d8\u6210"Update"'),(0,o.kt)("p",null,'\u5982\u679c\u6211\u4eec\u7684\u5408\u7ea6\u6709\u4fee\u6539\uff0c\u53ea\u8981\u5728\u8fd9\u91cc\u6784\u5efa\u540e\u70b9\u51fb"Update"\u5c31\u53ef\u4ee5\u8fdb\u884c\u66f4\u65b0\u4e86\u3002'),(0,o.kt)("h3",{id:"helloworld-\u4ee3\u7801"},"HelloWorld \u4ee3\u7801\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-toml",metastring:'title="Cargo.toml"',title:'"Cargo.toml"'},'[package]\nname = "hello-world"\nversion = "0.1.0"\nedition = "2021"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[features]\nno-entrypoint = []\n\n[dependencies]\nborsh = "0.10.3"\nsolana-program = "1.16.10"\nsolana-sdk = "1.16.11"\n\n[dev-dependencies]\nsolana-program-test = "1.16.11"\n\n[lib]\nname = "hello_world"\ncrate-type = ["cdylib", "lib"]\n\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="lib.rs"',title:'"lib.rs"'},'use borsh::{BorshDeserialize, BorshSerialize};\nuse solana_program::{\n    account_info::{next_account_info, AccountInfo},\n    entrypoint,\n    entrypoint::ProgramResult,\n    msg,\n    program_error::ProgramError,\n    pubkey::Pubkey,\n};\n\n/// Define the type of state stored in accounts\n#[derive(BorshSerialize, BorshDeserialize, Debug)]\npub struct GreetingAccount {\n    /// number of greetings\n    pub counter: u32,\n}\n\n// Declare and export the program\'s entrypoint\nentrypoint!(process_instruction);\n\n// Program entrypoint\'s implementation\npub fn process_instruction(\n    program_id: &Pubkey, // Public key of the account the hello world program was loaded into\n    accounts: &[AccountInfo], // The account to say hello to\n    _instruction_data: &[u8], // Ignored, all helloworld instructions are hellos\n) -> ProgramResult {\n    // Iterating accounts is safer than indexing\n    let accounts_iter = &mut accounts.iter();\n\n    // Get the account to say hello to\n    let account = next_account_info(accounts_iter)?;\n\n    // The account must be owned by the program in order to modify its data\n    if account.owner != program_id {\n        msg!("Greeted account does not have the correct program id");\n        return Err(ProgramError::IncorrectProgramId);\n    }\n\n    // Increment and store the number of times the account has been greeted\n    let mut greeting_account = GreetingAccount::try_from_slice(&account.data.borrow())?;\n\n    println!("greeting_account{:?}", greeting_account);\n\n    greeting_account.counter += 1;\n    // greeting_account.greeting = String::from("hello");\n\n    println!("greeting_account2{:?}", greeting_account);\n    println!("account.data.borrow_mut(){:?}", account.data.borrow_mut());\n    greeting_account.serialize(&mut &mut account.data.borrow_mut()[..])?;\n\n    msg!("Greeted {} time(s)!", greeting_account.counter);\n\n    Ok(())\n}\n\n// Sanity tests\n#[cfg(test)]\nmod tests {\n    use crate::{entrypoint::process_instruction, processor::GreetingAccount};\n    use borsh::BorshDeserialize;\n    use solana_program::{account_info::AccountInfo, pubkey::Pubkey, stake_history::Epoch};\n    use std::mem;\n\n    // cargo test test_sanity -- --nocapture\n    #[test]\n    fn test_sanity() {\n        let program_id = Pubkey::default();\n        let instruction_data: Vec<u8> = Vec::new();\n        let key = Pubkey::default();\n        let is_signer = false;\n        let is_writable = true;\n        let mut lamports = 0;\n        let mut data = vec![0; mem::size_of::<u32>()];\n        let owner = Pubkey::default();\n        let executable = false;\n        let rent_epoch = Epoch::default();\n\n        println!("key: {:?}", key);\n        println!("data: {:?}", data);\n        println!("rent_epoch: {:?}", rent_epoch);\n\n        let account = AccountInfo::new(\n            &key,\n            is_signer,\n            is_writable,\n            &mut lamports,\n            &mut data,\n            &owner,\n            executable,\n            rent_epoch,\n        );\n\n        let accounts = vec![account];\n\n        assert_eq!(\n            GreetingAccount::try_from_slice(&accounts[0].data.borrow())\n                .unwrap()\n                .counter,\n            0\n        );\n        process_instruction(&program_id, &accounts, &instruction_data).unwrap();\n        assert_eq!(\n            GreetingAccount::try_from_slice(&accounts[0].data.borrow())\n                .unwrap()\n                .counter,\n            1\n        );\n        process_instruction(&program_id, &accounts, &instruction_data).unwrap();\n        assert_eq!(\n            GreetingAccount::try_from_slice(&accounts[0].data.borrow())\n                .unwrap()\n                .counter,\n            2\n        );\n    }\n\n    #[test]\n    fn test_slice() {\n        println!("teset slice with")\n    }\n}\n\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="tests/lib.rs"',title:'"tests/lib.rs"'},'use borsh::BorshDeserialize;\nuse hello_world::processor::{process_instruction, GreetingAccount};\nuse solana_program_test::*;\nuse solana_sdk::{\n    account::Account,\n    instruction::{AccountMeta, Instruction},\n    pubkey::Pubkey,\n    signature::Signer,\n    transaction::Transaction,\n};\nuse std::mem;\n\n#[tokio::test]\nasync fn test_helloworld() {\n    let program_id = Pubkey::new_unique();\n    let greeted_pubkey = Pubkey::new_unique();\n\n    let mut program_test = ProgramTest::new(\n        "helloworld", // Run the BPF version with `cargo test-bpf`\n        program_id,\n        processor!(process_instruction), // Run the native version with `cargo test`\n    );\n    program_test.add_account(\n        greeted_pubkey,\n        Account {\n            lamports: 5,\n            data: vec![0_u8; mem::size_of::<u32>()],\n            owner: program_id,\n            ..Account::default()\n        },\n    );\n    let (mut banks_client, payer, recent_blockhash) = program_test.start().await;\n\n    // Verify account has zero greetings\n    let greeted_account = banks_client\n        .get_account(greeted_pubkey)\n        .await\n        .expect("get_account")\n        .expect("greeted_account not found");\n    assert_eq!(\n        GreetingAccount::try_from_slice(&greeted_account.data)\n            .unwrap()\n            .counter,\n        0\n    );\n\n    // Greet once\n    let mut transaction = Transaction::new_with_payer(\n        &[Instruction::new_with_bincode(\n            program_id,\n            &[0], // ignored but makes the instruction unique in the slot\n            vec![AccountMeta::new(greeted_pubkey, false)],\n        )],\n        Some(&payer.pubkey()),\n    );\n    transaction.sign(&[&payer], recent_blockhash);\n    banks_client.process_transaction(transaction).await.unwrap();\n\n    // Verify account has one greeting\n    let greeted_account = banks_client\n        .get_account(greeted_pubkey)\n        .await\n        .expect("get_account")\n        .expect("greeted_account not found");\n    assert_eq!(\n        GreetingAccount::try_from_slice(&greeted_account.data)\n            .unwrap()\n            .counter,\n        1\n    );\n\n    // Greet again\n    let mut transaction = Transaction::new_with_payer(\n        &[Instruction::new_with_bincode(\n            program_id,\n            &[1], // ignored but makes the instruction unique in the slot\n            vec![AccountMeta::new(greeted_pubkey, false)],\n        )],\n        Some(&payer.pubkey()),\n    );\n    transaction.sign(&[&payer], recent_blockhash);\n    banks_client.process_transaction(transaction).await.unwrap();\n\n    // Verify account has two greetings\n    let greeted_account = banks_client\n        .get_account(greeted_pubkey)\n        .await\n        .expect("get_account")\n        .expect("greeted_account not found");\n    assert_eq!(\n        GreetingAccount::try_from_slice(&greeted_account.data)\n            .unwrap()\n            .counter,\n        2\n    );\n}\n\n')),(0,o.kt)("h2",{id:"4\u5ba2\u6237\u7aef\u5f00\u53d1"},"4\u3001\u5ba2\u6237\u7aef\u5f00\u53d1"),(0,o.kt)("p",null,"\u56de\u5230 Explorer \u754c\u9762\uff0c\u6253\u5f00 client.ts\uff0c\u5728\u91cc\u9762\u8d34\u4e0a\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="solana_tools/client/src/pages/Tutorial/HelloWorld/Native.ts"',title:'"solana_tools/client/src/pages/Tutorial/HelloWorld/Native.ts"'},'// No imports needed: web3, borsh, pg and more are globally available\n// ts-node --esm ./Native.ts\n// node --experimental-specifier-resolution=node --loader ts-node/esm ./Native.ts\nimport assert from "assert";\nimport * as borsh from "borsh";\nimport web3, {\n    // clusterApiUrl,\n    SystemProgram,\n    Connection,\n    Keypair,\n    PublicKey,\n} from "@solana/web3.js";\n\nconst PRIVATE_KEY = `[37,37,60,131,98,125,34,130,135,2,57,248,169,60,174,216,219,70,59,155,64,7,77,104,33,204,94,10,112,105,150,19,81,152,193,57,135,12,148,233,95,219,65,201,180,32,3,250,82,142,28,180,128,106,126,102,144,196,181,26,146,135,251,94]`;\n\n// keypair\nconst secretKeyArray = JSON.parse(PRIVATE_KEY || "[]") as number[];\n\nconst PROGRAM_ID = "2VMQ2eVVwEUPtQzZES3goUjk7QjYcDM9N3RM8jUvms2V";\n\n// Step 1 \u8fde\u63a5\u5230Solana\u7f51\u7edc devnet\n// const devnet = clusterApiUrl("devnet");\nconst devnet = "https://qn-devnet.solana.fm/";\nconst connection = new Connection(devnet, "confirmed");\n\n// Step 2 \u521b\u5efa\u8005\u8d26\u53f7\u4fe1\u606f\uff08private key\uff09\nconst signer = Keypair.fromSecretKey(new Uint8Array(secretKeyArray));\n\nconst pg = {\n    connection,\n    PROGRAM_ID: new PublicKey(PROGRAM_ID),\n    wallet: {\n        keypair: signer,\n        publicKey: signer.publicKey,\n    },\n};\n/**\n * The state of a greeting account managed by the hello world program\n */\nclass GreetingAccount {\n    counter = 0;\n    constructor(fields: { counter: number } | undefined = undefined) {\n        if (fields) {\n            this.counter = fields.counter;\n        }\n    }\n}\n\n/**\n * Borsh schema definition for greeting accounts\n */\nconst GreetingSchema = new Map([\n    [GreetingAccount, { kind: "struct", fields: [["counter", "u32"]] }],\n]);\n\n// const GreetingSchema = {\n//     struct: {\n//         counter: "u32",\n//     },\n// };\n\n/**\n * The expected size of each greeting account.\n */\nconst GREETING_SIZE = borsh.serialize(\n    GreetingSchema as unknown as borsh.Schema,\n    new GreetingAccount()\n).length;\n\nconst test = async () => {\n    // Create greetings account instruction\n    const greetingAccountKp = new web3.Keypair();\n    const lamports = await pg.connection.getMinimumBalanceForRentExemption(\n        GREETING_SIZE\n    );\n    console.log(\n        "\ud83d\ude80 ~ file: Native.test.ts:81 ~ it ~ pg.PROGRAM_ID:",\n        pg.PROGRAM_ID\n    );\n    const createGreetingAccountIx = SystemProgram.createAccount({\n        fromPubkey: pg.wallet.publicKey,\n        lamports,\n        newAccountPubkey: greetingAccountKp.publicKey,\n        programId: pg.PROGRAM_ID,\n        space: GREETING_SIZE,\n    });\n\n    // Create greet instruction\n    const greetIx = new web3.TransactionInstruction({\n        keys: [\n            {\n                pubkey: greetingAccountKp.publicKey,\n                isSigner: false,\n                isWritable: true,\n            },\n        ],\n        programId: pg.PROGRAM_ID,\n    });\n\n    // Create transaction and add the instructions\n    const tx = new web3.Transaction();\n    tx.add(createGreetingAccountIx, greetIx);\n\n    // Send and confirm the transaction\n    const txHash = await web3.sendAndConfirmTransaction(pg.connection, tx, [\n        pg.wallet.keypair,\n        greetingAccountKp,\n    ]);\n    console.log(`Use \'solana confirm -v ${txHash}\' to see the logs`);\n\n    // Fetch the greetings account\n    const greetingAccount = await pg.connection.getAccountInfo(\n        greetingAccountKp.publicKey\n    );\n\n    if (!greetingAccount) {\n        console.error("Don\'t get greeting information");\n        return;\n    }\n\n    // Deserialize the account data\n    const deserializedAccountData: any = borsh.deserialize(\n        GreetingSchema,\n        GreetingAccount,\n        greetingAccount.data\n    );\n\n    // Assertions\n    assert.equal(greetingAccount?.lamports, lamports);\n\n    assert(greetingAccount?.owner.equals(pg.PROGRAM_ID));\n\n    assert.deepEqual(greetingAccount?.data, Buffer.from([1, 0, 0, 0]));\n\n    assert.equal(deserializedAccountData?.counter, 1);\n};\n\ntest();\n')),(0,o.kt)("p",null,'\u8fd9\u91cc\uff0c\u4e0d\u9700\u8981\u8fc7\u591a\u7684 import\uff0cIDE \u5df2\u7ecf\u5e2e\u5fd9\u4eec\u505a\u4e86 import\u3002\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 web3\u3002\u5176\u4e2d"pg.wallet" \u5c31\u662f\u6211\u4eec\u7684\u94b1\u5305\uff0c\u5176 publicKey \u5c5e\u6027\u5c31\u662f\u94b1\u5305\u7684\u5730\u5740\u3002\u800c pg.connection \u5c31\u5982\u540c\u6211\u4eec\u7528 web3 \u521b\u5efa \u7684 connection \u5bf9\u8c61\uff0c\u8fd9\u91cc\u5171\u7528 playground \u7684\u8bbe\u7f6e\u91cc\u9762\u7684 RPC \u5730\u5740\u3002'),(0,o.kt)("p",null,"pb.PROGRAM_ID \u5c31\u662f\u6211\u4eec\u8981\u521a\u521a\u6784\u5efa\u5e76\u53d1\u5e03\u7684\u5408\u7ea6\u7684\u5730\u5740\u3002"),(0,o.kt)("p",null,'\u70b9\u51fb"Run"\u6211\u4eec\u53ef\u4ee5\u5728\u65e5\u5fd7\u91cc\u9762\u770b\u5230:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},"Running client...\nclient.ts:\nMy address: 5pWae6RxD3zrYzBmPTMYo1LZ5vef3vfWH6iV3s8n6ZRG\nMy balance: 4.27388232 SOL\nSending transaction...\nTransaction sent with hash: 3XcaF6zpXthBQ2mih7DdVBuvwXi7L6Wy4rCHzgwHEaNsqMDNRGC5yppG9xKP9g9hYfT6wPEw127mxgYWBTouS5gz\n")),(0,o.kt)("p",null,'\u6253\u5f00 solana \u6d4f\u89c8\u5668\uff0c\u8d34\u4e0a\u8fd9\u91cc\u7684 hash \u5730\u5740\u3002\u53ef\u4ee5\u770b\u5230\u3002\u5728\u65e5\u5fd7\u90e8\u5206\uff0c\u6267\u884c\u4e86\u6211\u4eec\u524d\u9762\u5408\u7ea6\u4ee3\u7801\u91cc\u9762\u7684"HelloWorld"\u3002'),(0,o.kt)(s.Z,{minHeight:240,mdxType:"BrowserWindow"},(0,o.kt)(c.Z,{alt:"Docusaurus themed image",sources:{light:(0,a.Z)("/img/solana/playground_helloworld_explorer.png"),dark:(0,a.Z)("/img/solana/playground_helloworld_explorer.png")},mdxType:"ThemedImage"})),(0,o.kt)("h2",{id:"5\u65e5\u5fd7\u67e5\u770b"},"5\u3001\u65e5\u5fd7\u67e5\u770b"),(0,o.kt)("h3",{id:"\u7f51\u7edc\u8bbe\u7f6e"},"\u7f51\u7edc\u8bbe\u7f6e"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},"solana config set --url localhost\nConfig File: /Users/roy/.config/solana/cli/config.yml\nRPC URL: http://localhost:8899\nWebSocket URL: ws://localhost:8900/ (computed)\nKeypair Path: /Users/roy/.config/solana/id.json\nCommitment: confirmed\n\n")))}m.isMDXComponent=!0}}]);